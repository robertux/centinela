'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.42
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dbproyectoDataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dbproyectoDataSet
    Inherits System.Data.DataSet
    
    Private tableAdministrador As AdministradorDataTable
    
    Private tableestado_sensor As estado_sensorDataTable
    
    Private tablehorario_usuario As horario_usuarioDataTable
    
    Private tablelog_horario As log_horarioDataTable
    
    Private tablemapa As mapaDataTable
    
    Private tableSensor As SensorDataTable
    
    Private tablesensor_en_mapa As sensor_en_mapaDataTable
    
    Private tabletb_log As tb_logDataTable
    
    Private tabletipo_sensor As tipo_sensorDataTable
    
    Private tableUsuario As UsuarioDataTable
    
    Private tablevigilante As vigilanteDataTable
    
    Private relationFK_horario_actividad_Usuario As System.Data.DataRelation
    
    Private relationFK_log_horario_Usuario As System.Data.DataRelation
    
    Private relationFK_Sensor_estado_sensor As System.Data.DataRelation
    
    Private relationFK_Sensor_tipo_sensor As System.Data.DataRelation
    
    Private relationFK_sensor_en_mapa_mapa As System.Data.DataRelation
    
    Private relationFK_sensor_en_mapa_Sensor As System.Data.DataRelation
    
    Private relationFK_tb_log_Sensor As System.Data.DataRelation
    
    Private relationFK_tb_log_Usuario As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Administrador")) Is Nothing) Then
                MyBase.Tables.Add(New AdministradorDataTable(ds.Tables("Administrador")))
            End If
            If (Not (ds.Tables("estado_sensor")) Is Nothing) Then
                MyBase.Tables.Add(New estado_sensorDataTable(ds.Tables("estado_sensor")))
            End If
            If (Not (ds.Tables("horario_usuario")) Is Nothing) Then
                MyBase.Tables.Add(New horario_usuarioDataTable(ds.Tables("horario_usuario")))
            End If
            If (Not (ds.Tables("log_horario")) Is Nothing) Then
                MyBase.Tables.Add(New log_horarioDataTable(ds.Tables("log_horario")))
            End If
            If (Not (ds.Tables("mapa")) Is Nothing) Then
                MyBase.Tables.Add(New mapaDataTable(ds.Tables("mapa")))
            End If
            If (Not (ds.Tables("Sensor")) Is Nothing) Then
                MyBase.Tables.Add(New SensorDataTable(ds.Tables("Sensor")))
            End If
            If (Not (ds.Tables("sensor_en_mapa")) Is Nothing) Then
                MyBase.Tables.Add(New sensor_en_mapaDataTable(ds.Tables("sensor_en_mapa")))
            End If
            If (Not (ds.Tables("tb_log")) Is Nothing) Then
                MyBase.Tables.Add(New tb_logDataTable(ds.Tables("tb_log")))
            End If
            If (Not (ds.Tables("tipo_sensor")) Is Nothing) Then
                MyBase.Tables.Add(New tipo_sensorDataTable(ds.Tables("tipo_sensor")))
            End If
            If (Not (ds.Tables("Usuario")) Is Nothing) Then
                MyBase.Tables.Add(New UsuarioDataTable(ds.Tables("Usuario")))
            End If
            If (Not (ds.Tables("vigilante")) Is Nothing) Then
                MyBase.Tables.Add(New vigilanteDataTable(ds.Tables("vigilante")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Administrador() As AdministradorDataTable
        Get
            Return Me.tableAdministrador
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property estado_sensor() As estado_sensorDataTable
        Get
            Return Me.tableestado_sensor
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property horario_usuario() As horario_usuarioDataTable
        Get
            Return Me.tablehorario_usuario
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property log_horario() As log_horarioDataTable
        Get
            Return Me.tablelog_horario
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property mapa() As mapaDataTable
        Get
            Return Me.tablemapa
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Sensor() As SensorDataTable
        Get
            Return Me.tableSensor
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sensor_en_mapa() As sensor_en_mapaDataTable
        Get
            Return Me.tablesensor_en_mapa
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tb_log() As tb_logDataTable
        Get
            Return Me.tabletb_log
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tipo_sensor() As tipo_sensorDataTable
        Get
            Return Me.tabletipo_sensor
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Usuario() As UsuarioDataTable
        Get
            Return Me.tableUsuario
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property vigilante() As vigilanteDataTable
        Get
            Return Me.tablevigilante
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dbproyectoDataSet = CType(MyBase.Clone,dbproyectoDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Administrador")) Is Nothing) Then
                MyBase.Tables.Add(New AdministradorDataTable(ds.Tables("Administrador")))
            End If
            If (Not (ds.Tables("estado_sensor")) Is Nothing) Then
                MyBase.Tables.Add(New estado_sensorDataTable(ds.Tables("estado_sensor")))
            End If
            If (Not (ds.Tables("horario_usuario")) Is Nothing) Then
                MyBase.Tables.Add(New horario_usuarioDataTable(ds.Tables("horario_usuario")))
            End If
            If (Not (ds.Tables("log_horario")) Is Nothing) Then
                MyBase.Tables.Add(New log_horarioDataTable(ds.Tables("log_horario")))
            End If
            If (Not (ds.Tables("mapa")) Is Nothing) Then
                MyBase.Tables.Add(New mapaDataTable(ds.Tables("mapa")))
            End If
            If (Not (ds.Tables("Sensor")) Is Nothing) Then
                MyBase.Tables.Add(New SensorDataTable(ds.Tables("Sensor")))
            End If
            If (Not (ds.Tables("sensor_en_mapa")) Is Nothing) Then
                MyBase.Tables.Add(New sensor_en_mapaDataTable(ds.Tables("sensor_en_mapa")))
            End If
            If (Not (ds.Tables("tb_log")) Is Nothing) Then
                MyBase.Tables.Add(New tb_logDataTable(ds.Tables("tb_log")))
            End If
            If (Not (ds.Tables("tipo_sensor")) Is Nothing) Then
                MyBase.Tables.Add(New tipo_sensorDataTable(ds.Tables("tipo_sensor")))
            End If
            If (Not (ds.Tables("Usuario")) Is Nothing) Then
                MyBase.Tables.Add(New UsuarioDataTable(ds.Tables("Usuario")))
            End If
            If (Not (ds.Tables("vigilante")) Is Nothing) Then
                MyBase.Tables.Add(New vigilanteDataTable(ds.Tables("vigilante")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableAdministrador = CType(MyBase.Tables("Administrador"),AdministradorDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAdministrador) Is Nothing) Then
                Me.tableAdministrador.InitVars
            End If
        End If
        Me.tableestado_sensor = CType(MyBase.Tables("estado_sensor"),estado_sensorDataTable)
        If (initTable = true) Then
            If (Not (Me.tableestado_sensor) Is Nothing) Then
                Me.tableestado_sensor.InitVars
            End If
        End If
        Me.tablehorario_usuario = CType(MyBase.Tables("horario_usuario"),horario_usuarioDataTable)
        If (initTable = true) Then
            If (Not (Me.tablehorario_usuario) Is Nothing) Then
                Me.tablehorario_usuario.InitVars
            End If
        End If
        Me.tablelog_horario = CType(MyBase.Tables("log_horario"),log_horarioDataTable)
        If (initTable = true) Then
            If (Not (Me.tablelog_horario) Is Nothing) Then
                Me.tablelog_horario.InitVars
            End If
        End If
        Me.tablemapa = CType(MyBase.Tables("mapa"),mapaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablemapa) Is Nothing) Then
                Me.tablemapa.InitVars
            End If
        End If
        Me.tableSensor = CType(MyBase.Tables("Sensor"),SensorDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSensor) Is Nothing) Then
                Me.tableSensor.InitVars
            End If
        End If
        Me.tablesensor_en_mapa = CType(MyBase.Tables("sensor_en_mapa"),sensor_en_mapaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesensor_en_mapa) Is Nothing) Then
                Me.tablesensor_en_mapa.InitVars
            End If
        End If
        Me.tabletb_log = CType(MyBase.Tables("tb_log"),tb_logDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletb_log) Is Nothing) Then
                Me.tabletb_log.InitVars
            End If
        End If
        Me.tabletipo_sensor = CType(MyBase.Tables("tipo_sensor"),tipo_sensorDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletipo_sensor) Is Nothing) Then
                Me.tabletipo_sensor.InitVars
            End If
        End If
        Me.tableUsuario = CType(MyBase.Tables("Usuario"),UsuarioDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUsuario) Is Nothing) Then
                Me.tableUsuario.InitVars
            End If
        End If
        Me.tablevigilante = CType(MyBase.Tables("vigilante"),vigilanteDataTable)
        If (initTable = true) Then
            If (Not (Me.tablevigilante) Is Nothing) Then
                Me.tablevigilante.InitVars
            End If
        End If
        Me.relationFK_horario_actividad_Usuario = Me.Relations("FK_horario_actividad_Usuario")
        Me.relationFK_log_horario_Usuario = Me.Relations("FK_log_horario_Usuario")
        Me.relationFK_Sensor_estado_sensor = Me.Relations("FK_Sensor_estado_sensor")
        Me.relationFK_Sensor_tipo_sensor = Me.Relations("FK_Sensor_tipo_sensor")
        Me.relationFK_sensor_en_mapa_mapa = Me.Relations("FK_sensor_en_mapa_mapa")
        Me.relationFK_sensor_en_mapa_Sensor = Me.Relations("FK_sensor_en_mapa_Sensor")
        Me.relationFK_tb_log_Sensor = Me.Relations("FK_tb_log_Sensor")
        Me.relationFK_tb_log_Usuario = Me.Relations("FK_tb_log_Usuario")
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dbproyectoDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dbproyectoDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableAdministrador = New AdministradorDataTable
        MyBase.Tables.Add(Me.tableAdministrador)
        Me.tableestado_sensor = New estado_sensorDataTable
        MyBase.Tables.Add(Me.tableestado_sensor)
        Me.tablehorario_usuario = New horario_usuarioDataTable
        MyBase.Tables.Add(Me.tablehorario_usuario)
        Me.tablelog_horario = New log_horarioDataTable
        MyBase.Tables.Add(Me.tablelog_horario)
        Me.tablemapa = New mapaDataTable
        MyBase.Tables.Add(Me.tablemapa)
        Me.tableSensor = New SensorDataTable
        MyBase.Tables.Add(Me.tableSensor)
        Me.tablesensor_en_mapa = New sensor_en_mapaDataTable
        MyBase.Tables.Add(Me.tablesensor_en_mapa)
        Me.tabletb_log = New tb_logDataTable
        MyBase.Tables.Add(Me.tabletb_log)
        Me.tabletipo_sensor = New tipo_sensorDataTable
        MyBase.Tables.Add(Me.tabletipo_sensor)
        Me.tableUsuario = New UsuarioDataTable
        MyBase.Tables.Add(Me.tableUsuario)
        Me.tablevigilante = New vigilanteDataTable
        MyBase.Tables.Add(Me.tablevigilante)
        Me.relationFK_horario_actividad_Usuario = New System.Data.DataRelation("FK_horario_actividad_Usuario", New System.Data.DataColumn() {Me.tableUsuario.pk_idColumn}, New System.Data.DataColumn() {Me.tablehorario_usuario.fk_id_usuarioColumn}, false)
        Me.Relations.Add(Me.relationFK_horario_actividad_Usuario)
        Me.relationFK_log_horario_Usuario = New System.Data.DataRelation("FK_log_horario_Usuario", New System.Data.DataColumn() {Me.tableUsuario.pk_idColumn}, New System.Data.DataColumn() {Me.tablelog_horario.fk_id_usuarioColumn}, false)
        Me.Relations.Add(Me.relationFK_log_horario_Usuario)
        Me.relationFK_Sensor_estado_sensor = New System.Data.DataRelation("FK_Sensor_estado_sensor", New System.Data.DataColumn() {Me.tableestado_sensor.pk_idColumn}, New System.Data.DataColumn() {Me.tableSensor.fk_estadoColumn}, false)
        Me.Relations.Add(Me.relationFK_Sensor_estado_sensor)
        Me.relationFK_Sensor_tipo_sensor = New System.Data.DataRelation("FK_Sensor_tipo_sensor", New System.Data.DataColumn() {Me.tabletipo_sensor.pk_idColumn}, New System.Data.DataColumn() {Me.tableSensor.fk_tipoColumn}, false)
        Me.Relations.Add(Me.relationFK_Sensor_tipo_sensor)
        Me.relationFK_sensor_en_mapa_mapa = New System.Data.DataRelation("FK_sensor_en_mapa_mapa", New System.Data.DataColumn() {Me.tablemapa.pk_idColumn}, New System.Data.DataColumn() {Me.tablesensor_en_mapa.fk_id_mapaColumn}, false)
        Me.Relations.Add(Me.relationFK_sensor_en_mapa_mapa)
        Me.relationFK_sensor_en_mapa_Sensor = New System.Data.DataRelation("FK_sensor_en_mapa_Sensor", New System.Data.DataColumn() {Me.tableSensor.pk_idColumn}, New System.Data.DataColumn() {Me.tablesensor_en_mapa.fk_id_sensorColumn}, false)
        Me.Relations.Add(Me.relationFK_sensor_en_mapa_Sensor)
        Me.relationFK_tb_log_Sensor = New System.Data.DataRelation("FK_tb_log_Sensor", New System.Data.DataColumn() {Me.tableSensor.pk_idColumn}, New System.Data.DataColumn() {Me.tabletb_log.fk_id_sensorColumn}, false)
        Me.Relations.Add(Me.relationFK_tb_log_Sensor)
        Me.relationFK_tb_log_Usuario = New System.Data.DataRelation("FK_tb_log_Usuario", New System.Data.DataColumn() {Me.tableUsuario.pk_idColumn}, New System.Data.DataColumn() {Me.tabletb_log.fk_id_usuarioColumn}, false)
        Me.Relations.Add(Me.relationFK_tb_log_Usuario)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAdministrador() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeestado_sensor() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializehorario_usuario() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializelog_horario() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializemapa() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSensor() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesensor_en_mapa() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetb_log() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetipo_sensor() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeUsuario() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializevigilante() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dbproyectoDataSet = New dbproyectoDataSet
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub AdministradorRowChangeEventHandler(ByVal sender As Object, ByVal e As AdministradorRowChangeEvent)
    
    Public Delegate Sub estado_sensorRowChangeEventHandler(ByVal sender As Object, ByVal e As estado_sensorRowChangeEvent)
    
    Public Delegate Sub horario_usuarioRowChangeEventHandler(ByVal sender As Object, ByVal e As horario_usuarioRowChangeEvent)
    
    Public Delegate Sub log_horarioRowChangeEventHandler(ByVal sender As Object, ByVal e As log_horarioRowChangeEvent)
    
    Public Delegate Sub mapaRowChangeEventHandler(ByVal sender As Object, ByVal e As mapaRowChangeEvent)
    
    Public Delegate Sub SensorRowChangeEventHandler(ByVal sender As Object, ByVal e As SensorRowChangeEvent)
    
    Public Delegate Sub sensor_en_mapaRowChangeEventHandler(ByVal sender As Object, ByVal e As sensor_en_mapaRowChangeEvent)
    
    Public Delegate Sub tb_logRowChangeEventHandler(ByVal sender As Object, ByVal e As tb_logRowChangeEvent)
    
    Public Delegate Sub tipo_sensorRowChangeEventHandler(ByVal sender As Object, ByVal e As tipo_sensorRowChangeEvent)
    
    Public Delegate Sub UsuarioRowChangeEventHandler(ByVal sender As Object, ByVal e As UsuarioRowChangeEvent)
    
    Public Delegate Sub vigilanteRowChangeEventHandler(ByVal sender As Object, ByVal e As vigilanteRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AdministradorDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpk_id As System.Data.DataColumn
        
        Private columnnombre_completo As System.Data.DataColumn
        
        Private columnclave As System.Data.DataColumn
        
        Private columnadministrador As System.Data.DataColumn
        
        Private columnvisible As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Administrador"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pk_idColumn() As System.Data.DataColumn
            Get
                Return Me.columnpk_id
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombre_completoColumn() As System.Data.DataColumn
            Get
                Return Me.columnnombre_completo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property claveColumn() As System.Data.DataColumn
            Get
                Return Me.columnclave
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property administradorColumn() As System.Data.DataColumn
            Get
                Return Me.columnadministrador
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property visibleColumn() As System.Data.DataColumn
            Get
                Return Me.columnvisible
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AdministradorRow
            Get
                Return CType(Me.Rows(index),AdministradorRow)
            End Get
        End Property
        
        Public Event AdministradorRowChanging As AdministradorRowChangeEventHandler
        
        Public Event AdministradorRowChanged As AdministradorRowChangeEventHandler
        
        Public Event AdministradorRowDeleting As AdministradorRowChangeEventHandler
        
        Public Event AdministradorRowDeleted As AdministradorRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAdministradorRow(ByVal row As AdministradorRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAdministradorRow(ByVal pk_id As Integer, ByVal nombre_completo As String, ByVal clave As String, ByVal administrador As String, ByVal visible As Boolean) As AdministradorRow
            Dim rowAdministradorRow As AdministradorRow = CType(Me.NewRow,AdministradorRow)
            rowAdministradorRow.ItemArray = New Object() {pk_id, nombre_completo, clave, administrador, visible}
            Me.Rows.Add(rowAdministradorRow)
            Return rowAdministradorRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk_id(ByVal pk_id As Integer) As AdministradorRow
            Return CType(Me.Rows.Find(New Object() {pk_id}),AdministradorRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As AdministradorDataTable = CType(MyBase.Clone,AdministradorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New AdministradorDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk_id = MyBase.Columns("pk_id")
            Me.columnnombre_completo = MyBase.Columns("nombre_completo")
            Me.columnclave = MyBase.Columns("clave")
            Me.columnadministrador = MyBase.Columns("administrador")
            Me.columnvisible = MyBase.Columns("visible")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk_id = New System.Data.DataColumn("pk_id", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk_id)
            Me.columnnombre_completo = New System.Data.DataColumn("nombre_completo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre_completo)
            Me.columnclave = New System.Data.DataColumn("clave", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclave)
            Me.columnadministrador = New System.Data.DataColumn("administrador", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadministrador)
            Me.columnvisible = New System.Data.DataColumn("visible", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvisible)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnpk_id}, true))
            Me.columnpk_id.AllowDBNull = false
            Me.columnpk_id.Unique = true
            Me.columnnombre_completo.AllowDBNull = false
            Me.columnnombre_completo.MaxLength = 45
            Me.columnclave.AllowDBNull = false
            Me.columnclave.MaxLength = 10
            Me.columnadministrador.AllowDBNull = false
            Me.columnadministrador.MaxLength = 15
            Me.columnvisible.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAdministradorRow() As AdministradorRow
            Return CType(Me.NewRow,AdministradorRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New AdministradorRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AdministradorRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AdministradorRowChangedEvent) Is Nothing) Then
                RaiseEvent AdministradorRowChanged(Me, New AdministradorRowChangeEvent(CType(e.Row,AdministradorRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AdministradorRowChangingEvent) Is Nothing) Then
                RaiseEvent AdministradorRowChanging(Me, New AdministradorRowChangeEvent(CType(e.Row,AdministradorRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AdministradorRowDeletedEvent) Is Nothing) Then
                RaiseEvent AdministradorRowDeleted(Me, New AdministradorRowChangeEvent(CType(e.Row,AdministradorRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AdministradorRowDeletingEvent) Is Nothing) Then
                RaiseEvent AdministradorRowDeleting(Me, New AdministradorRowChangeEvent(CType(e.Row,AdministradorRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAdministradorRow(ByVal row As AdministradorRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dbproyectoDataSet = New dbproyectoDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AdministradorDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class estado_sensorDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpk_id As System.Data.DataColumn
        
        Private columnnombre As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "estado_sensor"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pk_idColumn() As System.Data.DataColumn
            Get
                Return Me.columnpk_id
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As estado_sensorRow
            Get
                Return CType(Me.Rows(index),estado_sensorRow)
            End Get
        End Property
        
        Public Event estado_sensorRowChanging As estado_sensorRowChangeEventHandler
        
        Public Event estado_sensorRowChanged As estado_sensorRowChangeEventHandler
        
        Public Event estado_sensorRowDeleting As estado_sensorRowChangeEventHandler
        
        Public Event estado_sensorRowDeleted As estado_sensorRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addestado_sensorRow(ByVal row As estado_sensorRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addestado_sensorRow(ByVal pk_id As Integer, ByVal nombre As String) As estado_sensorRow
            Dim rowestado_sensorRow As estado_sensorRow = CType(Me.NewRow,estado_sensorRow)
            rowestado_sensorRow.ItemArray = New Object() {pk_id, nombre}
            Me.Rows.Add(rowestado_sensorRow)
            Return rowestado_sensorRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk_id(ByVal pk_id As Integer) As estado_sensorRow
            Return CType(Me.Rows.Find(New Object() {pk_id}),estado_sensorRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As estado_sensorDataTable = CType(MyBase.Clone,estado_sensorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New estado_sensorDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk_id = MyBase.Columns("pk_id")
            Me.columnnombre = MyBase.Columns("nombre")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk_id = New System.Data.DataColumn("pk_id", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk_id)
            Me.columnnombre = New System.Data.DataColumn("nombre", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnpk_id}, true))
            Me.columnpk_id.AllowDBNull = false
            Me.columnpk_id.Unique = true
            Me.columnnombre.AllowDBNull = false
            Me.columnnombre.MaxLength = 20
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newestado_sensorRow() As estado_sensorRow
            Return CType(Me.NewRow,estado_sensorRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New estado_sensorRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(estado_sensorRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.estado_sensorRowChangedEvent) Is Nothing) Then
                RaiseEvent estado_sensorRowChanged(Me, New estado_sensorRowChangeEvent(CType(e.Row,estado_sensorRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.estado_sensorRowChangingEvent) Is Nothing) Then
                RaiseEvent estado_sensorRowChanging(Me, New estado_sensorRowChangeEvent(CType(e.Row,estado_sensorRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.estado_sensorRowDeletedEvent) Is Nothing) Then
                RaiseEvent estado_sensorRowDeleted(Me, New estado_sensorRowChangeEvent(CType(e.Row,estado_sensorRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.estado_sensorRowDeletingEvent) Is Nothing) Then
                RaiseEvent estado_sensorRowDeleting(Me, New estado_sensorRowChangeEvent(CType(e.Row,estado_sensorRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeestado_sensorRow(ByVal row As estado_sensorRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dbproyectoDataSet = New dbproyectoDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "estado_sensorDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class horario_usuarioDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpk_id As System.Data.DataColumn
        
        Private columnhora_inicio As System.Data.DataColumn
        
        Private columnhora_fin As System.Data.DataColumn
        
        Private columnfecha_inicio As System.Data.DataColumn
        
        Private columnfecha_fin As System.Data.DataColumn
        
        Private columnfk_id_usuario As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "horario_usuario"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pk_idColumn() As System.Data.DataColumn
            Get
                Return Me.columnpk_id
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property hora_inicioColumn() As System.Data.DataColumn
            Get
                Return Me.columnhora_inicio
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property hora_finColumn() As System.Data.DataColumn
            Get
                Return Me.columnhora_fin
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecha_inicioColumn() As System.Data.DataColumn
            Get
                Return Me.columnfecha_inicio
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecha_finColumn() As System.Data.DataColumn
            Get
                Return Me.columnfecha_fin
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fk_id_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnfk_id_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As horario_usuarioRow
            Get
                Return CType(Me.Rows(index),horario_usuarioRow)
            End Get
        End Property
        
        Public Event horario_usuarioRowChanging As horario_usuarioRowChangeEventHandler
        
        Public Event horario_usuarioRowChanged As horario_usuarioRowChangeEventHandler
        
        Public Event horario_usuarioRowDeleting As horario_usuarioRowChangeEventHandler
        
        Public Event horario_usuarioRowDeleted As horario_usuarioRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addhorario_usuarioRow(ByVal row As horario_usuarioRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addhorario_usuarioRow(ByVal pk_id As Integer, ByVal hora_inicio As Date, ByVal hora_fin As Date, ByVal fecha_inicio As Date, ByVal fecha_fin As Date, ByVal parentUsuarioRowByFK_horario_actividad_Usuario As UsuarioRow) As horario_usuarioRow
            Dim rowhorario_usuarioRow As horario_usuarioRow = CType(Me.NewRow,horario_usuarioRow)
            rowhorario_usuarioRow.ItemArray = New Object() {pk_id, hora_inicio, hora_fin, fecha_inicio, fecha_fin, parentUsuarioRowByFK_horario_actividad_Usuario(0)}
            Me.Rows.Add(rowhorario_usuarioRow)
            Return rowhorario_usuarioRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk_id(ByVal pk_id As Integer) As horario_usuarioRow
            Return CType(Me.Rows.Find(New Object() {pk_id}),horario_usuarioRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As horario_usuarioDataTable = CType(MyBase.Clone,horario_usuarioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New horario_usuarioDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk_id = MyBase.Columns("pk_id")
            Me.columnhora_inicio = MyBase.Columns("hora_inicio")
            Me.columnhora_fin = MyBase.Columns("hora_fin")
            Me.columnfecha_inicio = MyBase.Columns("fecha_inicio")
            Me.columnfecha_fin = MyBase.Columns("fecha_fin")
            Me.columnfk_id_usuario = MyBase.Columns("fk_id_usuario")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk_id = New System.Data.DataColumn("pk_id", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk_id)
            Me.columnhora_inicio = New System.Data.DataColumn("hora_inicio", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhora_inicio)
            Me.columnhora_fin = New System.Data.DataColumn("hora_fin", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhora_fin)
            Me.columnfecha_inicio = New System.Data.DataColumn("fecha_inicio", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecha_inicio)
            Me.columnfecha_fin = New System.Data.DataColumn("fecha_fin", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecha_fin)
            Me.columnfk_id_usuario = New System.Data.DataColumn("fk_id_usuario", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfk_id_usuario)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnpk_id}, true))
            Me.columnpk_id.AllowDBNull = false
            Me.columnpk_id.Unique = true
            Me.columnhora_inicio.AllowDBNull = false
            Me.columnhora_fin.AllowDBNull = false
            Me.columnfecha_inicio.AllowDBNull = false
            Me.columnfecha_fin.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newhorario_usuarioRow() As horario_usuarioRow
            Return CType(Me.NewRow,horario_usuarioRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New horario_usuarioRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(horario_usuarioRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.horario_usuarioRowChangedEvent) Is Nothing) Then
                RaiseEvent horario_usuarioRowChanged(Me, New horario_usuarioRowChangeEvent(CType(e.Row,horario_usuarioRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.horario_usuarioRowChangingEvent) Is Nothing) Then
                RaiseEvent horario_usuarioRowChanging(Me, New horario_usuarioRowChangeEvent(CType(e.Row,horario_usuarioRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.horario_usuarioRowDeletedEvent) Is Nothing) Then
                RaiseEvent horario_usuarioRowDeleted(Me, New horario_usuarioRowChangeEvent(CType(e.Row,horario_usuarioRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.horario_usuarioRowDeletingEvent) Is Nothing) Then
                RaiseEvent horario_usuarioRowDeleting(Me, New horario_usuarioRowChangeEvent(CType(e.Row,horario_usuarioRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removehorario_usuarioRow(ByVal row As horario_usuarioRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dbproyectoDataSet = New dbproyectoDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "horario_usuarioDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class log_horarioDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpk_id As System.Data.DataColumn
        
        Private columnfk_id_usuario As System.Data.DataColumn
        
        Private columnfecha_hora As System.Data.DataColumn
        
        Private columnsuceso As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "log_horario"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pk_idColumn() As System.Data.DataColumn
            Get
                Return Me.columnpk_id
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fk_id_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnfk_id_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecha_horaColumn() As System.Data.DataColumn
            Get
                Return Me.columnfecha_hora
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sucesoColumn() As System.Data.DataColumn
            Get
                Return Me.columnsuceso
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As log_horarioRow
            Get
                Return CType(Me.Rows(index),log_horarioRow)
            End Get
        End Property
        
        Public Event log_horarioRowChanging As log_horarioRowChangeEventHandler
        
        Public Event log_horarioRowChanged As log_horarioRowChangeEventHandler
        
        Public Event log_horarioRowDeleting As log_horarioRowChangeEventHandler
        
        Public Event log_horarioRowDeleted As log_horarioRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addlog_horarioRow(ByVal row As log_horarioRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addlog_horarioRow(ByVal pk_id As Integer, ByVal parentUsuarioRowByFK_log_horario_Usuario As UsuarioRow, ByVal fecha_hora As Date, ByVal suceso As String) As log_horarioRow
            Dim rowlog_horarioRow As log_horarioRow = CType(Me.NewRow,log_horarioRow)
            rowlog_horarioRow.ItemArray = New Object() {pk_id, parentUsuarioRowByFK_log_horario_Usuario(0), fecha_hora, suceso}
            Me.Rows.Add(rowlog_horarioRow)
            Return rowlog_horarioRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As log_horarioDataTable = CType(MyBase.Clone,log_horarioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New log_horarioDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk_id = MyBase.Columns("pk_id")
            Me.columnfk_id_usuario = MyBase.Columns("fk_id_usuario")
            Me.columnfecha_hora = MyBase.Columns("fecha_hora")
            Me.columnsuceso = MyBase.Columns("suceso")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk_id = New System.Data.DataColumn("pk_id", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk_id)
            Me.columnfk_id_usuario = New System.Data.DataColumn("fk_id_usuario", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfk_id_usuario)
            Me.columnfecha_hora = New System.Data.DataColumn("fecha_hora", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecha_hora)
            Me.columnsuceso = New System.Data.DataColumn("suceso", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsuceso)
            Me.columnpk_id.AllowDBNull = false
            Me.columnfk_id_usuario.AllowDBNull = false
            Me.columnfecha_hora.AllowDBNull = false
            Me.columnsuceso.AllowDBNull = false
            Me.columnsuceso.MaxLength = 1073741823
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newlog_horarioRow() As log_horarioRow
            Return CType(Me.NewRow,log_horarioRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New log_horarioRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(log_horarioRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.log_horarioRowChangedEvent) Is Nothing) Then
                RaiseEvent log_horarioRowChanged(Me, New log_horarioRowChangeEvent(CType(e.Row,log_horarioRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.log_horarioRowChangingEvent) Is Nothing) Then
                RaiseEvent log_horarioRowChanging(Me, New log_horarioRowChangeEvent(CType(e.Row,log_horarioRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.log_horarioRowDeletedEvent) Is Nothing) Then
                RaiseEvent log_horarioRowDeleted(Me, New log_horarioRowChangeEvent(CType(e.Row,log_horarioRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.log_horarioRowDeletingEvent) Is Nothing) Then
                RaiseEvent log_horarioRowDeleting(Me, New log_horarioRowChangeEvent(CType(e.Row,log_horarioRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removelog_horarioRow(ByVal row As log_horarioRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dbproyectoDataSet = New dbproyectoDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "log_horarioDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class mapaDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpk_id As System.Data.DataColumn
        
        Private columnnombre As System.Data.DataColumn
        
        Private columnimagen As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "mapa"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pk_idColumn() As System.Data.DataColumn
            Get
                Return Me.columnpk_id
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property imagenColumn() As System.Data.DataColumn
            Get
                Return Me.columnimagen
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As mapaRow
            Get
                Return CType(Me.Rows(index),mapaRow)
            End Get
        End Property
        
        Public Event mapaRowChanging As mapaRowChangeEventHandler
        
        Public Event mapaRowChanged As mapaRowChangeEventHandler
        
        Public Event mapaRowDeleting As mapaRowChangeEventHandler
        
        Public Event mapaRowDeleted As mapaRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddmapaRow(ByVal row As mapaRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddmapaRow(ByVal pk_id As Integer, ByVal nombre As String, ByVal imagen() As Byte) As mapaRow
            Dim rowmapaRow As mapaRow = CType(Me.NewRow,mapaRow)
            rowmapaRow.ItemArray = New Object() {pk_id, nombre, imagen}
            Me.Rows.Add(rowmapaRow)
            Return rowmapaRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk_id(ByVal pk_id As Integer) As mapaRow
            Return CType(Me.Rows.Find(New Object() {pk_id}),mapaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As mapaDataTable = CType(MyBase.Clone,mapaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New mapaDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk_id = MyBase.Columns("pk_id")
            Me.columnnombre = MyBase.Columns("nombre")
            Me.columnimagen = MyBase.Columns("imagen")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk_id = New System.Data.DataColumn("pk_id", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk_id)
            Me.columnnombre = New System.Data.DataColumn("nombre", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columnimagen = New System.Data.DataColumn("imagen", GetType(Byte()), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimagen)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnpk_id}, true))
            Me.columnpk_id.AllowDBNull = false
            Me.columnpk_id.Unique = true
            Me.columnnombre.AllowDBNull = false
            Me.columnnombre.MaxLength = 30
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewmapaRow() As mapaRow
            Return CType(Me.NewRow,mapaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New mapaRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(mapaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.mapaRowChangedEvent) Is Nothing) Then
                RaiseEvent mapaRowChanged(Me, New mapaRowChangeEvent(CType(e.Row,mapaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.mapaRowChangingEvent) Is Nothing) Then
                RaiseEvent mapaRowChanging(Me, New mapaRowChangeEvent(CType(e.Row,mapaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.mapaRowDeletedEvent) Is Nothing) Then
                RaiseEvent mapaRowDeleted(Me, New mapaRowChangeEvent(CType(e.Row,mapaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.mapaRowDeletingEvent) Is Nothing) Then
                RaiseEvent mapaRowDeleting(Me, New mapaRowChangeEvent(CType(e.Row,mapaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovemapaRow(ByVal row As mapaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dbproyectoDataSet = New dbproyectoDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "mapaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SensorDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpk_id As System.Data.DataColumn
        
        Private columnnombre As System.Data.DataColumn
        
        Private columnfk_tipo As System.Data.DataColumn
        
        Private columnfk_estado As System.Data.DataColumn
        
        Private columnpin As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Sensor"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pk_idColumn() As System.Data.DataColumn
            Get
                Return Me.columnpk_id
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fk_tipoColumn() As System.Data.DataColumn
            Get
                Return Me.columnfk_tipo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fk_estadoColumn() As System.Data.DataColumn
            Get
                Return Me.columnfk_estado
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pinColumn() As System.Data.DataColumn
            Get
                Return Me.columnpin
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SensorRow
            Get
                Return CType(Me.Rows(index),SensorRow)
            End Get
        End Property
        
        Public Event SensorRowChanging As SensorRowChangeEventHandler
        
        Public Event SensorRowChanged As SensorRowChangeEventHandler
        
        Public Event SensorRowDeleting As SensorRowChangeEventHandler
        
        Public Event SensorRowDeleted As SensorRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSensorRow(ByVal row As SensorRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSensorRow(ByVal pk_id As Integer, ByVal nombre As String, ByVal parenttipo_sensorRowByFK_Sensor_tipo_sensor As tipo_sensorRow, ByVal parentestado_sensorRowByFK_Sensor_estado_sensor As estado_sensorRow, ByVal pin As Integer) As SensorRow
            Dim rowSensorRow As SensorRow = CType(Me.NewRow,SensorRow)
            rowSensorRow.ItemArray = New Object() {pk_id, nombre, parenttipo_sensorRowByFK_Sensor_tipo_sensor(0), parentestado_sensorRowByFK_Sensor_estado_sensor(0), pin}
            Me.Rows.Add(rowSensorRow)
            Return rowSensorRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk_id(ByVal pk_id As Integer) As SensorRow
            Return CType(Me.Rows.Find(New Object() {pk_id}),SensorRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SensorDataTable = CType(MyBase.Clone,SensorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SensorDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk_id = MyBase.Columns("pk_id")
            Me.columnnombre = MyBase.Columns("nombre")
            Me.columnfk_tipo = MyBase.Columns("fk_tipo")
            Me.columnfk_estado = MyBase.Columns("fk_estado")
            Me.columnpin = MyBase.Columns("pin")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk_id = New System.Data.DataColumn("pk_id", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk_id)
            Me.columnnombre = New System.Data.DataColumn("nombre", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columnfk_tipo = New System.Data.DataColumn("fk_tipo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfk_tipo)
            Me.columnfk_estado = New System.Data.DataColumn("fk_estado", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfk_estado)
            Me.columnpin = New System.Data.DataColumn("pin", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpin)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnpk_id}, true))
            Me.columnpk_id.AllowDBNull = false
            Me.columnpk_id.Unique = true
            Me.columnnombre.AllowDBNull = false
            Me.columnnombre.MaxLength = 20
            Me.columnfk_tipo.AllowDBNull = false
            Me.columnfk_estado.AllowDBNull = false
            Me.columnpin.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSensorRow() As SensorRow
            Return CType(Me.NewRow,SensorRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SensorRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SensorRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SensorRowChangedEvent) Is Nothing) Then
                RaiseEvent SensorRowChanged(Me, New SensorRowChangeEvent(CType(e.Row,SensorRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SensorRowChangingEvent) Is Nothing) Then
                RaiseEvent SensorRowChanging(Me, New SensorRowChangeEvent(CType(e.Row,SensorRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SensorRowDeletedEvent) Is Nothing) Then
                RaiseEvent SensorRowDeleted(Me, New SensorRowChangeEvent(CType(e.Row,SensorRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SensorRowDeletingEvent) Is Nothing) Then
                RaiseEvent SensorRowDeleting(Me, New SensorRowChangeEvent(CType(e.Row,SensorRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSensorRow(ByVal row As SensorRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dbproyectoDataSet = New dbproyectoDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SensorDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sensor_en_mapaDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpk_id As System.Data.DataColumn
        
        Private columnfk_id_sensor As System.Data.DataColumn
        
        Private columnfk_id_mapa As System.Data.DataColumn
        
        Private columnposx As System.Data.DataColumn
        
        Private columnposy As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sensor_en_mapa"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pk_idColumn() As System.Data.DataColumn
            Get
                Return Me.columnpk_id
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fk_id_sensorColumn() As System.Data.DataColumn
            Get
                Return Me.columnfk_id_sensor
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fk_id_mapaColumn() As System.Data.DataColumn
            Get
                Return Me.columnfk_id_mapa
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property posxColumn() As System.Data.DataColumn
            Get
                Return Me.columnposx
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property posyColumn() As System.Data.DataColumn
            Get
                Return Me.columnposy
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sensor_en_mapaRow
            Get
                Return CType(Me.Rows(index),sensor_en_mapaRow)
            End Get
        End Property
        
        Public Event sensor_en_mapaRowChanging As sensor_en_mapaRowChangeEventHandler
        
        Public Event sensor_en_mapaRowChanged As sensor_en_mapaRowChangeEventHandler
        
        Public Event sensor_en_mapaRowDeleting As sensor_en_mapaRowChangeEventHandler
        
        Public Event sensor_en_mapaRowDeleted As sensor_en_mapaRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsensor_en_mapaRow(ByVal row As sensor_en_mapaRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsensor_en_mapaRow(ByVal pk_id As Integer, ByVal parentSensorRowByFK_sensor_en_mapa_Sensor As SensorRow, ByVal parentmapaRowByFK_sensor_en_mapa_mapa As mapaRow, ByVal posx As Integer, ByVal posy As Integer) As sensor_en_mapaRow
            Dim rowsensor_en_mapaRow As sensor_en_mapaRow = CType(Me.NewRow,sensor_en_mapaRow)
            rowsensor_en_mapaRow.ItemArray = New Object() {pk_id, parentSensorRowByFK_sensor_en_mapa_Sensor(0), parentmapaRowByFK_sensor_en_mapa_mapa(0), posx, posy}
            Me.Rows.Add(rowsensor_en_mapaRow)
            Return rowsensor_en_mapaRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As sensor_en_mapaDataTable = CType(MyBase.Clone,sensor_en_mapaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New sensor_en_mapaDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk_id = MyBase.Columns("pk_id")
            Me.columnfk_id_sensor = MyBase.Columns("fk_id_sensor")
            Me.columnfk_id_mapa = MyBase.Columns("fk_id_mapa")
            Me.columnposx = MyBase.Columns("posx")
            Me.columnposy = MyBase.Columns("posy")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk_id = New System.Data.DataColumn("pk_id", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk_id)
            Me.columnfk_id_sensor = New System.Data.DataColumn("fk_id_sensor", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfk_id_sensor)
            Me.columnfk_id_mapa = New System.Data.DataColumn("fk_id_mapa", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfk_id_mapa)
            Me.columnposx = New System.Data.DataColumn("posx", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnposx)
            Me.columnposy = New System.Data.DataColumn("posy", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnposy)
            Me.columnpk_id.AllowDBNull = false
            Me.columnfk_id_sensor.AllowDBNull = false
            Me.columnfk_id_mapa.AllowDBNull = false
            Me.columnposx.AllowDBNull = false
            Me.columnposy.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsensor_en_mapaRow() As sensor_en_mapaRow
            Return CType(Me.NewRow,sensor_en_mapaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New sensor_en_mapaRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(sensor_en_mapaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sensor_en_mapaRowChangedEvent) Is Nothing) Then
                RaiseEvent sensor_en_mapaRowChanged(Me, New sensor_en_mapaRowChangeEvent(CType(e.Row,sensor_en_mapaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sensor_en_mapaRowChangingEvent) Is Nothing) Then
                RaiseEvent sensor_en_mapaRowChanging(Me, New sensor_en_mapaRowChangeEvent(CType(e.Row,sensor_en_mapaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sensor_en_mapaRowDeletedEvent) Is Nothing) Then
                RaiseEvent sensor_en_mapaRowDeleted(Me, New sensor_en_mapaRowChangeEvent(CType(e.Row,sensor_en_mapaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sensor_en_mapaRowDeletingEvent) Is Nothing) Then
                RaiseEvent sensor_en_mapaRowDeleting(Me, New sensor_en_mapaRowChangeEvent(CType(e.Row,sensor_en_mapaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesensor_en_mapaRow(ByVal row As sensor_en_mapaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dbproyectoDataSet = New dbproyectoDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sensor_en_mapaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tb_logDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpk_id As System.Data.DataColumn
        
        Private columnfk_id_sensor As System.Data.DataColumn
        
        Private columnfk_id_estado_sensor As System.Data.DataColumn
        
        Private columnsuceso As System.Data.DataColumn
        
        Private columnfecha_hora As System.Data.DataColumn
        
        Private columnfk_id_usuario As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tb_log"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pk_idColumn() As System.Data.DataColumn
            Get
                Return Me.columnpk_id
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fk_id_sensorColumn() As System.Data.DataColumn
            Get
                Return Me.columnfk_id_sensor
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fk_id_estado_sensorColumn() As System.Data.DataColumn
            Get
                Return Me.columnfk_id_estado_sensor
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sucesoColumn() As System.Data.DataColumn
            Get
                Return Me.columnsuceso
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecha_horaColumn() As System.Data.DataColumn
            Get
                Return Me.columnfecha_hora
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fk_id_usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnfk_id_usuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tb_logRow
            Get
                Return CType(Me.Rows(index),tb_logRow)
            End Get
        End Property
        
        Public Event tb_logRowChanging As tb_logRowChangeEventHandler
        
        Public Event tb_logRowChanged As tb_logRowChangeEventHandler
        
        Public Event tb_logRowDeleting As tb_logRowChangeEventHandler
        
        Public Event tb_logRowDeleted As tb_logRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addtb_logRow(ByVal row As tb_logRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addtb_logRow(ByVal pk_id As Integer, ByVal parentSensorRowByFK_tb_log_Sensor As SensorRow, ByVal fk_id_estado_sensor As Integer, ByVal suceso As String, ByVal fecha_hora As Date, ByVal parentUsuarioRowByFK_tb_log_Usuario As UsuarioRow) As tb_logRow
            Dim rowtb_logRow As tb_logRow = CType(Me.NewRow,tb_logRow)
            rowtb_logRow.ItemArray = New Object() {pk_id, parentSensorRowByFK_tb_log_Sensor(0), fk_id_estado_sensor, suceso, fecha_hora, parentUsuarioRowByFK_tb_log_Usuario(0)}
            Me.Rows.Add(rowtb_logRow)
            Return rowtb_logRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As tb_logDataTable = CType(MyBase.Clone,tb_logDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New tb_logDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk_id = MyBase.Columns("pk_id")
            Me.columnfk_id_sensor = MyBase.Columns("fk_id_sensor")
            Me.columnfk_id_estado_sensor = MyBase.Columns("fk_id_estado_sensor")
            Me.columnsuceso = MyBase.Columns("suceso")
            Me.columnfecha_hora = MyBase.Columns("fecha_hora")
            Me.columnfk_id_usuario = MyBase.Columns("fk_id_usuario")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk_id = New System.Data.DataColumn("pk_id", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk_id)
            Me.columnfk_id_sensor = New System.Data.DataColumn("fk_id_sensor", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfk_id_sensor)
            Me.columnfk_id_estado_sensor = New System.Data.DataColumn("fk_id_estado_sensor", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfk_id_estado_sensor)
            Me.columnsuceso = New System.Data.DataColumn("suceso", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsuceso)
            Me.columnfecha_hora = New System.Data.DataColumn("fecha_hora", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecha_hora)
            Me.columnfk_id_usuario = New System.Data.DataColumn("fk_id_usuario", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfk_id_usuario)
            Me.columnpk_id.AllowDBNull = false
            Me.columnfk_id_sensor.AllowDBNull = false
            Me.columnfk_id_estado_sensor.AllowDBNull = false
            Me.columnsuceso.AllowDBNull = false
            Me.columnsuceso.MaxLength = 1073741823
            Me.columnfecha_hora.AllowDBNull = false
            Me.columnfk_id_usuario.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newtb_logRow() As tb_logRow
            Return CType(Me.NewRow,tb_logRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New tb_logRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tb_logRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tb_logRowChangedEvent) Is Nothing) Then
                RaiseEvent tb_logRowChanged(Me, New tb_logRowChangeEvent(CType(e.Row,tb_logRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tb_logRowChangingEvent) Is Nothing) Then
                RaiseEvent tb_logRowChanging(Me, New tb_logRowChangeEvent(CType(e.Row,tb_logRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tb_logRowDeletedEvent) Is Nothing) Then
                RaiseEvent tb_logRowDeleted(Me, New tb_logRowChangeEvent(CType(e.Row,tb_logRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tb_logRowDeletingEvent) Is Nothing) Then
                RaiseEvent tb_logRowDeleting(Me, New tb_logRowChangeEvent(CType(e.Row,tb_logRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removetb_logRow(ByVal row As tb_logRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dbproyectoDataSet = New dbproyectoDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tb_logDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tipo_sensorDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpk_id As System.Data.DataColumn
        
        Private columnnombre As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tipo_sensor"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pk_idColumn() As System.Data.DataColumn
            Get
                Return Me.columnpk_id
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tipo_sensorRow
            Get
                Return CType(Me.Rows(index),tipo_sensorRow)
            End Get
        End Property
        
        Public Event tipo_sensorRowChanging As tipo_sensorRowChangeEventHandler
        
        Public Event tipo_sensorRowChanged As tipo_sensorRowChangeEventHandler
        
        Public Event tipo_sensorRowDeleting As tipo_sensorRowChangeEventHandler
        
        Public Event tipo_sensorRowDeleted As tipo_sensorRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addtipo_sensorRow(ByVal row As tipo_sensorRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addtipo_sensorRow(ByVal pk_id As Integer, ByVal nombre As String) As tipo_sensorRow
            Dim rowtipo_sensorRow As tipo_sensorRow = CType(Me.NewRow,tipo_sensorRow)
            rowtipo_sensorRow.ItemArray = New Object() {pk_id, nombre}
            Me.Rows.Add(rowtipo_sensorRow)
            Return rowtipo_sensorRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk_id(ByVal pk_id As Integer) As tipo_sensorRow
            Return CType(Me.Rows.Find(New Object() {pk_id}),tipo_sensorRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As tipo_sensorDataTable = CType(MyBase.Clone,tipo_sensorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New tipo_sensorDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk_id = MyBase.Columns("pk_id")
            Me.columnnombre = MyBase.Columns("nombre")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk_id = New System.Data.DataColumn("pk_id", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk_id)
            Me.columnnombre = New System.Data.DataColumn("nombre", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnpk_id}, true))
            Me.columnpk_id.AllowDBNull = false
            Me.columnpk_id.Unique = true
            Me.columnnombre.AllowDBNull = false
            Me.columnnombre.MaxLength = 25
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newtipo_sensorRow() As tipo_sensorRow
            Return CType(Me.NewRow,tipo_sensorRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New tipo_sensorRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tipo_sensorRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tipo_sensorRowChangedEvent) Is Nothing) Then
                RaiseEvent tipo_sensorRowChanged(Me, New tipo_sensorRowChangeEvent(CType(e.Row,tipo_sensorRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tipo_sensorRowChangingEvent) Is Nothing) Then
                RaiseEvent tipo_sensorRowChanging(Me, New tipo_sensorRowChangeEvent(CType(e.Row,tipo_sensorRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tipo_sensorRowDeletedEvent) Is Nothing) Then
                RaiseEvent tipo_sensorRowDeleted(Me, New tipo_sensorRowChangeEvent(CType(e.Row,tipo_sensorRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tipo_sensorRowDeletingEvent) Is Nothing) Then
                RaiseEvent tipo_sensorRowDeleting(Me, New tipo_sensorRowChangeEvent(CType(e.Row,tipo_sensorRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removetipo_sensorRow(ByVal row As tipo_sensorRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dbproyectoDataSet = New dbproyectoDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tipo_sensorDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UsuarioDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpk_id As System.Data.DataColumn
        
        Private columnnombre_completo As System.Data.DataColumn
        
        Private columnclave As System.Data.DataColumn
        
        Private columnusuario As System.Data.DataColumn
        
        Private columnvisible As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Usuario"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pk_idColumn() As System.Data.DataColumn
            Get
                Return Me.columnpk_id
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombre_completoColumn() As System.Data.DataColumn
            Get
                Return Me.columnnombre_completo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property claveColumn() As System.Data.DataColumn
            Get
                Return Me.columnclave
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property usuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnusuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property visibleColumn() As System.Data.DataColumn
            Get
                Return Me.columnvisible
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UsuarioRow
            Get
                Return CType(Me.Rows(index),UsuarioRow)
            End Get
        End Property
        
        Public Event UsuarioRowChanging As UsuarioRowChangeEventHandler
        
        Public Event UsuarioRowChanged As UsuarioRowChangeEventHandler
        
        Public Event UsuarioRowDeleting As UsuarioRowChangeEventHandler
        
        Public Event UsuarioRowDeleted As UsuarioRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddUsuarioRow(ByVal row As UsuarioRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddUsuarioRow(ByVal pk_id As Integer, ByVal nombre_completo As String, ByVal clave As String, ByVal usuario As String, ByVal visible As Boolean) As UsuarioRow
            Dim rowUsuarioRow As UsuarioRow = CType(Me.NewRow,UsuarioRow)
            rowUsuarioRow.ItemArray = New Object() {pk_id, nombre_completo, clave, usuario, visible}
            Me.Rows.Add(rowUsuarioRow)
            Return rowUsuarioRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk_id(ByVal pk_id As Integer) As UsuarioRow
            Return CType(Me.Rows.Find(New Object() {pk_id}),UsuarioRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As UsuarioDataTable = CType(MyBase.Clone,UsuarioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New UsuarioDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk_id = MyBase.Columns("pk_id")
            Me.columnnombre_completo = MyBase.Columns("nombre_completo")
            Me.columnclave = MyBase.Columns("clave")
            Me.columnusuario = MyBase.Columns("usuario")
            Me.columnvisible = MyBase.Columns("visible")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk_id = New System.Data.DataColumn("pk_id", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk_id)
            Me.columnnombre_completo = New System.Data.DataColumn("nombre_completo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre_completo)
            Me.columnclave = New System.Data.DataColumn("clave", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclave)
            Me.columnusuario = New System.Data.DataColumn("usuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnusuario)
            Me.columnvisible = New System.Data.DataColumn("visible", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvisible)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnpk_id}, true))
            Me.columnpk_id.AllowDBNull = false
            Me.columnpk_id.Unique = true
            Me.columnnombre_completo.AllowDBNull = false
            Me.columnnombre_completo.MaxLength = 45
            Me.columnclave.AllowDBNull = false
            Me.columnclave.MaxLength = 10
            Me.columnusuario.AllowDBNull = false
            Me.columnusuario.MaxLength = 15
            Me.columnvisible.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewUsuarioRow() As UsuarioRow
            Return CType(Me.NewRow,UsuarioRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New UsuarioRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UsuarioRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UsuarioRowChangedEvent) Is Nothing) Then
                RaiseEvent UsuarioRowChanged(Me, New UsuarioRowChangeEvent(CType(e.Row,UsuarioRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UsuarioRowChangingEvent) Is Nothing) Then
                RaiseEvent UsuarioRowChanging(Me, New UsuarioRowChangeEvent(CType(e.Row,UsuarioRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UsuarioRowDeletedEvent) Is Nothing) Then
                RaiseEvent UsuarioRowDeleted(Me, New UsuarioRowChangeEvent(CType(e.Row,UsuarioRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UsuarioRowDeletingEvent) Is Nothing) Then
                RaiseEvent UsuarioRowDeleting(Me, New UsuarioRowChangeEvent(CType(e.Row,UsuarioRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveUsuarioRow(ByVal row As UsuarioRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dbproyectoDataSet = New dbproyectoDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UsuarioDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class vigilanteDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpk_id As System.Data.DataColumn
        
        Private columnnombre As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "vigilante"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pk_idColumn() As System.Data.DataColumn
            Get
                Return Me.columnpk_id
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As vigilanteRow
            Get
                Return CType(Me.Rows(index),vigilanteRow)
            End Get
        End Property
        
        Public Event vigilanteRowChanging As vigilanteRowChangeEventHandler
        
        Public Event vigilanteRowChanged As vigilanteRowChangeEventHandler
        
        Public Event vigilanteRowDeleting As vigilanteRowChangeEventHandler
        
        Public Event vigilanteRowDeleted As vigilanteRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddvigilanteRow(ByVal row As vigilanteRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddvigilanteRow(ByVal pk_id As Integer, ByVal nombre As String) As vigilanteRow
            Dim rowvigilanteRow As vigilanteRow = CType(Me.NewRow,vigilanteRow)
            rowvigilanteRow.ItemArray = New Object() {pk_id, nombre}
            Me.Rows.Add(rowvigilanteRow)
            Return rowvigilanteRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypk_id(ByVal pk_id As Integer) As vigilanteRow
            Return CType(Me.Rows.Find(New Object() {pk_id}),vigilanteRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As vigilanteDataTable = CType(MyBase.Clone,vigilanteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New vigilanteDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpk_id = MyBase.Columns("pk_id")
            Me.columnnombre = MyBase.Columns("nombre")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpk_id = New System.Data.DataColumn("pk_id", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpk_id)
            Me.columnnombre = New System.Data.DataColumn("nombre", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnpk_id}, true))
            Me.columnpk_id.AllowDBNull = false
            Me.columnpk_id.Unique = true
            Me.columnnombre.AllowDBNull = false
            Me.columnnombre.MaxLength = 1073741823
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewvigilanteRow() As vigilanteRow
            Return CType(Me.NewRow,vigilanteRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New vigilanteRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(vigilanteRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.vigilanteRowChangedEvent) Is Nothing) Then
                RaiseEvent vigilanteRowChanged(Me, New vigilanteRowChangeEvent(CType(e.Row,vigilanteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.vigilanteRowChangingEvent) Is Nothing) Then
                RaiseEvent vigilanteRowChanging(Me, New vigilanteRowChangeEvent(CType(e.Row,vigilanteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.vigilanteRowDeletedEvent) Is Nothing) Then
                RaiseEvent vigilanteRowDeleted(Me, New vigilanteRowChangeEvent(CType(e.Row,vigilanteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.vigilanteRowDeletingEvent) Is Nothing) Then
                RaiseEvent vigilanteRowDeleting(Me, New vigilanteRowChangeEvent(CType(e.Row,vigilanteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovevigilanteRow(ByVal row As vigilanteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dbproyectoDataSet = New dbproyectoDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "vigilanteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AdministradorRow
        Inherits System.Data.DataRow
        
        Private tableAdministrador As AdministradorDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAdministrador = CType(Me.Table,AdministradorDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk_id() As Integer
            Get
                Return CType(Me(Me.tableAdministrador.pk_idColumn),Integer)
            End Get
            Set
                Me(Me.tableAdministrador.pk_idColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre_completo() As String
            Get
                Return CType(Me(Me.tableAdministrador.nombre_completoColumn),String)
            End Get
            Set
                Me(Me.tableAdministrador.nombre_completoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property clave() As String
            Get
                Return CType(Me(Me.tableAdministrador.claveColumn),String)
            End Get
            Set
                Me(Me.tableAdministrador.claveColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property administrador() As String
            Get
                Return CType(Me(Me.tableAdministrador.administradorColumn),String)
            End Get
            Set
                Me(Me.tableAdministrador.administradorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property visible() As Boolean
            Get
                Return CType(Me(Me.tableAdministrador.visibleColumn),Boolean)
            End Get
            Set
                Me(Me.tableAdministrador.visibleColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class estado_sensorRow
        Inherits System.Data.DataRow
        
        Private tableestado_sensor As estado_sensorDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableestado_sensor = CType(Me.Table,estado_sensorDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk_id() As Integer
            Get
                Return CType(Me(Me.tableestado_sensor.pk_idColumn),Integer)
            End Get
            Set
                Me(Me.tableestado_sensor.pk_idColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Return CType(Me(Me.tableestado_sensor.nombreColumn),String)
            End Get
            Set
                Me(Me.tableestado_sensor.nombreColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSensorRows() As SensorRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Sensor_estado_sensor")),SensorRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class horario_usuarioRow
        Inherits System.Data.DataRow
        
        Private tablehorario_usuario As horario_usuarioDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablehorario_usuario = CType(Me.Table,horario_usuarioDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk_id() As Integer
            Get
                Return CType(Me(Me.tablehorario_usuario.pk_idColumn),Integer)
            End Get
            Set
                Me(Me.tablehorario_usuario.pk_idColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property hora_inicio() As Date
            Get
                Return CType(Me(Me.tablehorario_usuario.hora_inicioColumn),Date)
            End Get
            Set
                Me(Me.tablehorario_usuario.hora_inicioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property hora_fin() As Date
            Get
                Return CType(Me(Me.tablehorario_usuario.hora_finColumn),Date)
            End Get
            Set
                Me(Me.tablehorario_usuario.hora_finColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecha_inicio() As Date
            Get
                Return CType(Me(Me.tablehorario_usuario.fecha_inicioColumn),Date)
            End Get
            Set
                Me(Me.tablehorario_usuario.fecha_inicioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecha_fin() As Date
            Get
                Return CType(Me(Me.tablehorario_usuario.fecha_finColumn),Date)
            End Get
            Set
                Me(Me.tablehorario_usuario.fecha_finColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fk_id_usuario() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablehorario_usuario.fk_id_usuarioColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'fk_id_usuario' de la tabla 'horario_usuario' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehorario_usuario.fk_id_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioRow() As UsuarioRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_horario_actividad_Usuario")),UsuarioRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_horario_actividad_Usuario"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isfk_id_usuarioNull() As Boolean
            Return Me.IsNull(Me.tablehorario_usuario.fk_id_usuarioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setfk_id_usuarioNull()
            Me(Me.tablehorario_usuario.fk_id_usuarioColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class log_horarioRow
        Inherits System.Data.DataRow
        
        Private tablelog_horario As log_horarioDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablelog_horario = CType(Me.Table,log_horarioDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk_id() As Integer
            Get
                Return CType(Me(Me.tablelog_horario.pk_idColumn),Integer)
            End Get
            Set
                Me(Me.tablelog_horario.pk_idColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fk_id_usuario() As Integer
            Get
                Return CType(Me(Me.tablelog_horario.fk_id_usuarioColumn),Integer)
            End Get
            Set
                Me(Me.tablelog_horario.fk_id_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecha_hora() As Date
            Get
                Return CType(Me(Me.tablelog_horario.fecha_horaColumn),Date)
            End Get
            Set
                Me(Me.tablelog_horario.fecha_horaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property suceso() As String
            Get
                Return CType(Me(Me.tablelog_horario.sucesoColumn),String)
            End Get
            Set
                Me(Me.tablelog_horario.sucesoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioRow() As UsuarioRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_log_horario_Usuario")),UsuarioRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_log_horario_Usuario"))
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class mapaRow
        Inherits System.Data.DataRow
        
        Private tablemapa As mapaDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablemapa = CType(Me.Table,mapaDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk_id() As Integer
            Get
                Return CType(Me(Me.tablemapa.pk_idColumn),Integer)
            End Get
            Set
                Me(Me.tablemapa.pk_idColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Return CType(Me(Me.tablemapa.nombreColumn),String)
            End Get
            Set
                Me(Me.tablemapa.nombreColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property imagen() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablemapa.imagenColumn),Byte())
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'imagen' de la tabla 'mapa' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemapa.imagenColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsimagenNull() As Boolean
            Return Me.IsNull(Me.tablemapa.imagenColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetimagenNull()
            Me(Me.tablemapa.imagenColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Getsensor_en_mapaRows() As sensor_en_mapaRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_sensor_en_mapa_mapa")),sensor_en_mapaRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SensorRow
        Inherits System.Data.DataRow
        
        Private tableSensor As SensorDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSensor = CType(Me.Table,SensorDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk_id() As Integer
            Get
                Return CType(Me(Me.tableSensor.pk_idColumn),Integer)
            End Get
            Set
                Me(Me.tableSensor.pk_idColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Return CType(Me(Me.tableSensor.nombreColumn),String)
            End Get
            Set
                Me(Me.tableSensor.nombreColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fk_tipo() As Integer
            Get
                Return CType(Me(Me.tableSensor.fk_tipoColumn),Integer)
            End Get
            Set
                Me(Me.tableSensor.fk_tipoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fk_estado() As Integer
            Get
                Return CType(Me(Me.tableSensor.fk_estadoColumn),Integer)
            End Get
            Set
                Me(Me.tableSensor.fk_estadoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pin() As Integer
            Get
                Return CType(Me(Me.tableSensor.pinColumn),Integer)
            End Get
            Set
                Me(Me.tableSensor.pinColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estado_sensorRow() As estado_sensorRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Sensor_estado_sensor")),estado_sensorRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Sensor_estado_sensor"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tipo_sensorRow() As tipo_sensorRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Sensor_tipo_sensor")),tipo_sensorRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Sensor_tipo_sensor"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Getsensor_en_mapaRows() As sensor_en_mapaRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_sensor_en_mapa_Sensor")),sensor_en_mapaRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Gettb_logRows() As tb_logRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tb_log_Sensor")),tb_logRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sensor_en_mapaRow
        Inherits System.Data.DataRow
        
        Private tablesensor_en_mapa As sensor_en_mapaDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesensor_en_mapa = CType(Me.Table,sensor_en_mapaDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk_id() As Integer
            Get
                Return CType(Me(Me.tablesensor_en_mapa.pk_idColumn),Integer)
            End Get
            Set
                Me(Me.tablesensor_en_mapa.pk_idColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fk_id_sensor() As Integer
            Get
                Return CType(Me(Me.tablesensor_en_mapa.fk_id_sensorColumn),Integer)
            End Get
            Set
                Me(Me.tablesensor_en_mapa.fk_id_sensorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fk_id_mapa() As Integer
            Get
                Return CType(Me(Me.tablesensor_en_mapa.fk_id_mapaColumn),Integer)
            End Get
            Set
                Me(Me.tablesensor_en_mapa.fk_id_mapaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property posx() As Integer
            Get
                Return CType(Me(Me.tablesensor_en_mapa.posxColumn),Integer)
            End Get
            Set
                Me(Me.tablesensor_en_mapa.posxColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property posy() As Integer
            Get
                Return CType(Me(Me.tablesensor_en_mapa.posyColumn),Integer)
            End Get
            Set
                Me(Me.tablesensor_en_mapa.posyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mapaRow() As mapaRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_sensor_en_mapa_mapa")),mapaRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_sensor_en_mapa_mapa"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SensorRow() As SensorRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_sensor_en_mapa_Sensor")),SensorRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_sensor_en_mapa_Sensor"))
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tb_logRow
        Inherits System.Data.DataRow
        
        Private tabletb_log As tb_logDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletb_log = CType(Me.Table,tb_logDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk_id() As Integer
            Get
                Return CType(Me(Me.tabletb_log.pk_idColumn),Integer)
            End Get
            Set
                Me(Me.tabletb_log.pk_idColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fk_id_sensor() As Integer
            Get
                Return CType(Me(Me.tabletb_log.fk_id_sensorColumn),Integer)
            End Get
            Set
                Me(Me.tabletb_log.fk_id_sensorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fk_id_estado_sensor() As Integer
            Get
                Return CType(Me(Me.tabletb_log.fk_id_estado_sensorColumn),Integer)
            End Get
            Set
                Me(Me.tabletb_log.fk_id_estado_sensorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property suceso() As String
            Get
                Return CType(Me(Me.tabletb_log.sucesoColumn),String)
            End Get
            Set
                Me(Me.tabletb_log.sucesoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecha_hora() As Date
            Get
                Return CType(Me(Me.tabletb_log.fecha_horaColumn),Date)
            End Get
            Set
                Me(Me.tabletb_log.fecha_horaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fk_id_usuario() As Integer
            Get
                Return CType(Me(Me.tabletb_log.fk_id_usuarioColumn),Integer)
            End Get
            Set
                Me(Me.tabletb_log.fk_id_usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SensorRow() As SensorRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tb_log_Sensor")),SensorRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tb_log_Sensor"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsuarioRow() As UsuarioRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tb_log_Usuario")),UsuarioRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tb_log_Usuario"))
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tipo_sensorRow
        Inherits System.Data.DataRow
        
        Private tabletipo_sensor As tipo_sensorDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletipo_sensor = CType(Me.Table,tipo_sensorDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk_id() As Integer
            Get
                Return CType(Me(Me.tabletipo_sensor.pk_idColumn),Integer)
            End Get
            Set
                Me(Me.tabletipo_sensor.pk_idColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Return CType(Me(Me.tabletipo_sensor.nombreColumn),String)
            End Get
            Set
                Me(Me.tabletipo_sensor.nombreColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSensorRows() As SensorRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Sensor_tipo_sensor")),SensorRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class UsuarioRow
        Inherits System.Data.DataRow
        
        Private tableUsuario As UsuarioDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUsuario = CType(Me.Table,UsuarioDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk_id() As Integer
            Get
                Return CType(Me(Me.tableUsuario.pk_idColumn),Integer)
            End Get
            Set
                Me(Me.tableUsuario.pk_idColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre_completo() As String
            Get
                Return CType(Me(Me.tableUsuario.nombre_completoColumn),String)
            End Get
            Set
                Me(Me.tableUsuario.nombre_completoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property clave() As String
            Get
                Return CType(Me(Me.tableUsuario.claveColumn),String)
            End Get
            Set
                Me(Me.tableUsuario.claveColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property usuario() As String
            Get
                Return CType(Me(Me.tableUsuario.usuarioColumn),String)
            End Get
            Set
                Me(Me.tableUsuario.usuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property visible() As Boolean
            Get
                Return CType(Me(Me.tableUsuario.visibleColumn),Boolean)
            End Get
            Set
                Me(Me.tableUsuario.visibleColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Gethorario_usuarioRows() As horario_usuarioRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_horario_actividad_Usuario")),horario_usuarioRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Getlog_horarioRows() As log_horarioRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_log_horario_Usuario")),log_horarioRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Gettb_logRows() As tb_logRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tb_log_Usuario")),tb_logRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class vigilanteRow
        Inherits System.Data.DataRow
        
        Private tablevigilante As vigilanteDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablevigilante = CType(Me.Table,vigilanteDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pk_id() As Integer
            Get
                Return CType(Me(Me.tablevigilante.pk_idColumn),Integer)
            End Get
            Set
                Me(Me.tablevigilante.pk_idColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Return CType(Me(Me.tablevigilante.nombreColumn),String)
            End Get
            Set
                Me(Me.tablevigilante.nombreColumn) = value
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AdministradorRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As AdministradorRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AdministradorRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AdministradorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class estado_sensorRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As estado_sensorRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As estado_sensorRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As estado_sensorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class horario_usuarioRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As horario_usuarioRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As horario_usuarioRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As horario_usuarioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class log_horarioRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As log_horarioRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As log_horarioRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As log_horarioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class mapaRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As mapaRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As mapaRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As mapaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SensorRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SensorRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SensorRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SensorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sensor_en_mapaRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As sensor_en_mapaRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sensor_en_mapaRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sensor_en_mapaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tb_logRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As tb_logRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tb_logRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tb_logRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tipo_sensorRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As tipo_sensorRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tipo_sensorRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tipo_sensorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class UsuarioRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As UsuarioRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As UsuarioRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As UsuarioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class vigilanteRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As vigilanteRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As vigilanteRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As vigilanteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dbproyectoDataSetTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AdministradorTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Administrador"
            tableMapping.ColumnMappings.Add("pk_id", "pk_id")
            tableMapping.ColumnMappings.Add("nombre_completo", "nombre_completo")
            tableMapping.ColumnMappings.Add("clave", "clave")
            tableMapping.ColumnMappings.Add("administrador", "administrador")
            tableMapping.ColumnMappings.Add("visible", "visible")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Administrador] WHERE (([pk_id] = @Original_pk_id) AND ([nombre"& _ 
                "_completo] = @Original_nombre_completo) AND ([clave] = @Original_clave) AND ([ad"& _ 
                "ministrador] = @Original_administrador) AND ([visible] = @Original_visible))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_nombre_completo", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_completo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_clave", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "clave", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_administrador", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "administrador", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_visible", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "visible", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Administrador] ([pk_id], [nombre_completo], [clave], [administ"& _ 
                "rador], [visible]) VALUES (@pk_id, @nombre_completo, @clave, @administrador, @vi"& _ 
                "sible);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk_id, nombre_completo, clave, administrador, visible FROM Admin"& _ 
                "istrador WHERE (pk_id = @pk_id)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@nombre_completo", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_completo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@clave", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "clave", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@administrador", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "administrador", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@visible", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "visible", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Administrador] SET [pk_id] = @pk_id, [nombre_completo] = @nombre_co"& _ 
                "mpleto, [clave] = @clave, [administrador] = @administrador, [visible] = @visible"& _ 
                " WHERE (([pk_id] = @Original_pk_id) AND ([nombre_completo] = @Original_nombre_co"& _ 
                "mpleto) AND ([clave] = @Original_clave) AND ([administrador] = @Original_adminis"& _ 
                "trador) AND ([visible] = @Original_visible));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk_id, nombre_completo, cl"& _ 
                "ave, administrador, visible FROM Administrador WHERE (pk_id = @pk_id)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@nombre_completo", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_completo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@clave", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "clave", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@administrador", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "administrador", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@visible", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "visible", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_nombre_completo", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_completo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_clave", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "clave", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_administrador", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "administrador", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_visible", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "visible", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=.\SQLEXPRESS;AttachDbFilename=|DataDirectory|\bin\Debug\dbproyecto.md"& _ 
                "f;Integrated Security=True;Connect Timeout=30;User Instance=True"
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT pk_id, nombre_completo, clave, administrador, visible FROM dbo.Administrad"& _ 
                "or"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dbproyectoDataSet.AdministradorDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dbproyectoDataSet.AdministradorDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dbproyectoDataSet.AdministradorDataTable = New dbproyectoDataSet.AdministradorDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dbproyectoDataSet.AdministradorDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dbproyectoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Administrador")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_pk_id As Integer, ByVal Original_nombre_completo As String, ByVal Original_clave As String, ByVal Original_administrador As String, ByVal Original_visible As Boolean) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_pk_id,Integer)
            If (Original_nombre_completo Is Nothing) Then
                Throw New System.ArgumentNullException("Original_nombre_completo")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_nombre_completo,String)
            End If
            If (Original_clave Is Nothing) Then
                Throw New System.ArgumentNullException("Original_clave")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_clave,String)
            End If
            If (Original_administrador Is Nothing) Then
                Throw New System.ArgumentNullException("Original_administrador")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_administrador,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_visible,Boolean)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal pk_id As Integer, ByVal nombre_completo As String, ByVal clave As String, ByVal administrador As String, ByVal visible As Boolean) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(pk_id,Integer)
            If (nombre_completo Is Nothing) Then
                Throw New System.ArgumentNullException("nombre_completo")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nombre_completo,String)
            End If
            If (clave Is Nothing) Then
                Throw New System.ArgumentNullException("clave")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(clave,String)
            End If
            If (administrador Is Nothing) Then
                Throw New System.ArgumentNullException("administrador")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(administrador,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(visible,Boolean)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal pk_id As Integer, ByVal nombre_completo As String, ByVal clave As String, ByVal administrador As String, ByVal visible As Boolean, ByVal Original_pk_id As Integer, ByVal Original_nombre_completo As String, ByVal Original_clave As String, ByVal Original_administrador As String, ByVal Original_visible As Boolean) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(pk_id,Integer)
            If (nombre_completo Is Nothing) Then
                Throw New System.ArgumentNullException("nombre_completo")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nombre_completo,String)
            End If
            If (clave Is Nothing) Then
                Throw New System.ArgumentNullException("clave")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(clave,String)
            End If
            If (administrador Is Nothing) Then
                Throw New System.ArgumentNullException("administrador")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(administrador,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(visible,Boolean)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_pk_id,Integer)
            If (Original_nombre_completo Is Nothing) Then
                Throw New System.ArgumentNullException("Original_nombre_completo")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_nombre_completo,String)
            End If
            If (Original_clave Is Nothing) Then
                Throw New System.ArgumentNullException("Original_clave")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_clave,String)
            End If
            If (Original_administrador Is Nothing) Then
                Throw New System.ArgumentNullException("Original_administrador")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_administrador,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_visible,Boolean)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class estado_sensorTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "estado_sensor"
            tableMapping.ColumnMappings.Add("pk_id", "pk_id")
            tableMapping.ColumnMappings.Add("nombre", "nombre")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[estado_sensor] WHERE (([pk_id] = @Original_pk_id) AND ([nombre"& _ 
                "] = @Original_nombre))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_nombre", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[estado_sensor] ([pk_id], [nombre]) VALUES (@pk_id, @nombre);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "SELECT pk_id, nombre FROM estado_sensor WHERE (pk_id = @pk_id)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@nombre", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[estado_sensor] SET [pk_id] = @pk_id, [nombre] = @nombre WHERE (([pk"& _ 
                "_id] = @Original_pk_id) AND ([nombre] = @Original_nombre));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk_id, nombr"& _ 
                "e FROM estado_sensor WHERE (pk_id = @pk_id)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@nombre", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_nombre", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=.\SQLEXPRESS;AttachDbFilename=|DataDirectory|\bin\Debug\dbproyecto.md"& _ 
                "f;Integrated Security=True;Connect Timeout=30;User Instance=True"
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT pk_id, nombre FROM dbo.estado_sensor"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dbproyectoDataSet.estado_sensorDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dbproyectoDataSet.estado_sensorDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dbproyectoDataSet.estado_sensorDataTable = New dbproyectoDataSet.estado_sensorDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dbproyectoDataSet.estado_sensorDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dbproyectoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "estado_sensor")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_pk_id As Integer, ByVal Original_nombre As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_pk_id,Integer)
            If (Original_nombre Is Nothing) Then
                Throw New System.ArgumentNullException("Original_nombre")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_nombre,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal pk_id As Integer, ByVal nombre As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(pk_id,Integer)
            If (nombre Is Nothing) Then
                Throw New System.ArgumentNullException("nombre")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nombre,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal pk_id As Integer, ByVal nombre As String, ByVal Original_pk_id As Integer, ByVal Original_nombre As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(pk_id,Integer)
            If (nombre Is Nothing) Then
                Throw New System.ArgumentNullException("nombre")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nombre,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_pk_id,Integer)
            If (Original_nombre Is Nothing) Then
                Throw New System.ArgumentNullException("Original_nombre")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_nombre,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class horario_usuarioTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "horario_usuario"
            tableMapping.ColumnMappings.Add("pk_id", "pk_id")
            tableMapping.ColumnMappings.Add("hora_inicio", "hora_inicio")
            tableMapping.ColumnMappings.Add("hora_fin", "hora_fin")
            tableMapping.ColumnMappings.Add("fecha_inicio", "fecha_inicio")
            tableMapping.ColumnMappings.Add("fecha_fin", "fecha_fin")
            tableMapping.ColumnMappings.Add("fk_id_usuario", "fk_id_usuario")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[horario_usuario] WHERE (([pk_id] = @Original_pk_id) AND ([hora"& _ 
                "_inicio] = @Original_hora_inicio) AND ([hora_fin] = @Original_hora_fin) AND ([fe"& _ 
                "cha_inicio] = @Original_fecha_inicio) AND ([fecha_fin] = @Original_fecha_fin) AN"& _ 
                "D ((@IsNull_fk_id_usuario = 1 AND [fk_id_usuario] IS NULL) OR ([fk_id_usuario] ="& _ 
                " @Original_fk_id_usuario)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_hora_inicio", System.Data.SqlDbType.SmallDateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "hora_inicio", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_hora_fin", System.Data.SqlDbType.SmallDateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "hora_fin", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_fecha_inicio", System.Data.SqlDbType.SmallDateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fecha_inicio", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_fecha_fin", System.Data.SqlDbType.SmallDateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fecha_fin", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_fk_id_usuario", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fk_id_usuario", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_fk_id_usuario", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fk_id_usuario", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[horario_usuario] ([pk_id], [hora_inicio], [hora_fin], [fecha_i"& _ 
                "nicio], [fecha_fin], [fk_id_usuario]) VALUES (@pk_id, @hora_inicio, @hora_fin, @"& _ 
                "fecha_inicio, @fecha_fin, @fk_id_usuario);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk_id, hora_inicio, hora_fin,"& _ 
                " fecha_inicio, fecha_fin, fk_id_usuario FROM horario_usuario WHERE (pk_id = @pk_"& _ 
                "id)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@hora_inicio", System.Data.SqlDbType.SmallDateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "hora_inicio", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@hora_fin", System.Data.SqlDbType.SmallDateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "hora_fin", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fecha_inicio", System.Data.SqlDbType.SmallDateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fecha_inicio", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fecha_fin", System.Data.SqlDbType.SmallDateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fecha_fin", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fk_id_usuario", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fk_id_usuario", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[horario_usuario] SET [pk_id] = @pk_id, [hora_inicio] = @hora_inicio"& _ 
                ", [hora_fin] = @hora_fin, [fecha_inicio] = @fecha_inicio, [fecha_fin] = @fecha_f"& _ 
                "in, [fk_id_usuario] = @fk_id_usuario WHERE (([pk_id] = @Original_pk_id) AND ([ho"& _ 
                "ra_inicio] = @Original_hora_inicio) AND ([hora_fin] = @Original_hora_fin) AND (["& _ 
                "fecha_inicio] = @Original_fecha_inicio) AND ([fecha_fin] = @Original_fecha_fin) "& _ 
                "AND ((@IsNull_fk_id_usuario = 1 AND [fk_id_usuario] IS NULL) OR ([fk_id_usuario]"& _ 
                " = @Original_fk_id_usuario)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk_id, hora_inicio, hora_fin, fecha_inici"& _ 
                "o, fecha_fin, fk_id_usuario FROM horario_usuario WHERE (pk_id = @pk_id)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@hora_inicio", System.Data.SqlDbType.SmallDateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "hora_inicio", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@hora_fin", System.Data.SqlDbType.SmallDateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "hora_fin", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fecha_inicio", System.Data.SqlDbType.SmallDateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fecha_inicio", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fecha_fin", System.Data.SqlDbType.SmallDateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fecha_fin", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fk_id_usuario", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fk_id_usuario", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_hora_inicio", System.Data.SqlDbType.SmallDateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "hora_inicio", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_hora_fin", System.Data.SqlDbType.SmallDateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "hora_fin", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_fecha_inicio", System.Data.SqlDbType.SmallDateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fecha_inicio", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_fecha_fin", System.Data.SqlDbType.SmallDateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fecha_fin", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_fk_id_usuario", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fk_id_usuario", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_fk_id_usuario", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fk_id_usuario", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=.\SQLEXPRESS;AttachDbFilename=|DataDirectory|\bin\Debug\dbproyecto.md"& _ 
                "f;Integrated Security=True;Connect Timeout=30;User Instance=True"
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT pk_id, hora_inicio, hora_fin, fecha_inicio, fecha_fin, fk_id_usuario FROM "& _ 
                "dbo.horario_usuario"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dbproyectoDataSet.horario_usuarioDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dbproyectoDataSet.horario_usuarioDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dbproyectoDataSet.horario_usuarioDataTable = New dbproyectoDataSet.horario_usuarioDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dbproyectoDataSet.horario_usuarioDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dbproyectoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "horario_usuario")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_pk_id As Integer, ByVal Original_hora_inicio As Date, ByVal Original_hora_fin As Date, ByVal Original_fecha_inicio As Date, ByVal Original_fecha_fin As Date, ByVal Original_fk_id_usuario As System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_pk_id,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_hora_inicio,Date)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_hora_fin,Date)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_fecha_inicio,Date)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_fecha_fin,Date)
            If (Original_fk_id_usuario.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_fk_id_usuario.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal pk_id As Integer, ByVal hora_inicio As Date, ByVal hora_fin As Date, ByVal fecha_inicio As Date, ByVal fecha_fin As Date, ByVal fk_id_usuario As System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(pk_id,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(hora_inicio,Date)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(hora_fin,Date)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(fecha_inicio,Date)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(fecha_fin,Date)
            If (fk_id_usuario.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(fk_id_usuario.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal pk_id As Integer, ByVal hora_inicio As Date, ByVal hora_fin As Date, ByVal fecha_inicio As Date, ByVal fecha_fin As Date, ByVal fk_id_usuario As System.Nullable(Of Integer), ByVal Original_pk_id As Integer, ByVal Original_hora_inicio As Date, ByVal Original_hora_fin As Date, ByVal Original_fecha_inicio As Date, ByVal Original_fecha_fin As Date, ByVal Original_fk_id_usuario As System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(pk_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(hora_inicio,Date)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(hora_fin,Date)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(fecha_inicio,Date)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(fecha_fin,Date)
            If (fk_id_usuario.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(fk_id_usuario.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_pk_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_hora_inicio,Date)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_hora_fin,Date)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_fecha_inicio,Date)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_fecha_fin,Date)
            If (Original_fk_id_usuario.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_fk_id_usuario.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class log_horarioTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "log_horario"
            tableMapping.ColumnMappings.Add("pk_id", "pk_id")
            tableMapping.ColumnMappings.Add("fk_id_usuario", "fk_id_usuario")
            tableMapping.ColumnMappings.Add("fecha_hora", "fecha_hora")
            tableMapping.ColumnMappings.Add("suceso", "suceso")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[log_horario] ([pk_id], [fk_id_usuario], [fecha_hora], [suceso]"& _ 
                ") VALUES (@pk_id, @fk_id_usuario, @fecha_hora, @suceso)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fk_id_usuario", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fk_id_usuario", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fecha_hora", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fecha_hora", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@suceso", System.Data.SqlDbType.NText, 0, System.Data.ParameterDirection.Input, 0, 0, "suceso", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=.\SQLEXPRESS;AttachDbFilename=|DataDirectory|\bin\Debug\dbproyecto.md"& _ 
                "f;Integrated Security=True;Connect Timeout=30;User Instance=True"
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT pk_id, fk_id_usuario, fecha_hora, suceso FROM dbo.log_horario"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dbproyectoDataSet.log_horarioDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dbproyectoDataSet.log_horarioDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dbproyectoDataSet.log_horarioDataTable = New dbproyectoDataSet.log_horarioDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dbproyectoDataSet.log_horarioDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dbproyectoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "log_horario")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal pk_id As Integer, ByVal fk_id_usuario As Integer, ByVal fecha_hora As Date, ByVal suceso As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(pk_id,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(fk_id_usuario,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(fecha_hora,Date)
            If (suceso Is Nothing) Then
                Throw New System.ArgumentNullException("suceso")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(suceso,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class mapaTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "mapa"
            tableMapping.ColumnMappings.Add("pk_id", "pk_id")
            tableMapping.ColumnMappings.Add("nombre", "nombre")
            tableMapping.ColumnMappings.Add("imagen", "imagen")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[mapa] WHERE (([pk_id] = @Original_pk_id) AND ([nombre] = @Orig"& _ 
                "inal_nombre))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_nombre", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[mapa] ([pk_id], [nombre], [imagen]) VALUES (@pk_id, @nombre, @"& _ 
                "imagen);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk_id, nombre, imagen FROM mapa WHERE (pk_id = @pk_id)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@nombre", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@imagen", System.Data.SqlDbType.Image, 0, System.Data.ParameterDirection.Input, 0, 0, "imagen", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[mapa] SET [pk_id] = @pk_id, [nombre] = @nombre, [imagen] = @imagen "& _ 
                "WHERE (([pk_id] = @Original_pk_id) AND ([nombre] = @Original_nombre));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT p"& _ 
                "k_id, nombre, imagen FROM mapa WHERE (pk_id = @pk_id)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@nombre", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@imagen", System.Data.SqlDbType.Image, 0, System.Data.ParameterDirection.Input, 0, 0, "imagen", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_nombre", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=.\SQLEXPRESS;AttachDbFilename=|DataDirectory|\bin\Debug\dbproyecto.md"& _ 
                "f;Integrated Security=True;Connect Timeout=30;User Instance=True"
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT pk_id, nombre, imagen FROM dbo.mapa"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dbproyectoDataSet.mapaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dbproyectoDataSet.mapaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dbproyectoDataSet.mapaDataTable = New dbproyectoDataSet.mapaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dbproyectoDataSet.mapaDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dbproyectoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "mapa")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_pk_id As Integer, ByVal Original_nombre As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_pk_id,Integer)
            If (Original_nombre Is Nothing) Then
                Throw New System.ArgumentNullException("Original_nombre")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_nombre,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal pk_id As Integer, ByVal nombre As String, ByVal imagen() As Byte) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(pk_id,Integer)
            If (nombre Is Nothing) Then
                Throw New System.ArgumentNullException("nombre")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nombre,String)
            End If
            If (imagen Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(imagen,Byte())
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal pk_id As Integer, ByVal nombre As String, ByVal imagen() As Byte, ByVal Original_pk_id As Integer, ByVal Original_nombre As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(pk_id,Integer)
            If (nombre Is Nothing) Then
                Throw New System.ArgumentNullException("nombre")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nombre,String)
            End If
            If (imagen Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(imagen,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_pk_id,Integer)
            If (Original_nombre Is Nothing) Then
                Throw New System.ArgumentNullException("Original_nombre")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_nombre,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SensorTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Sensor"
            tableMapping.ColumnMappings.Add("pk_id", "pk_id")
            tableMapping.ColumnMappings.Add("nombre", "nombre")
            tableMapping.ColumnMappings.Add("fk_tipo", "fk_tipo")
            tableMapping.ColumnMappings.Add("fk_estado", "fk_estado")
            tableMapping.ColumnMappings.Add("pin", "pin")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Sensor] WHERE (([pk_id] = @Original_pk_id) AND ([nombre] = @Or"& _ 
                "iginal_nombre) AND ([fk_tipo] = @Original_fk_tipo) AND ([fk_estado] = @Original_"& _ 
                "fk_estado) AND ([pin] = @Original_pin))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_nombre", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_fk_tipo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fk_tipo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_fk_estado", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fk_estado", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_pin", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pin", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Sensor] ([pk_id], [nombre], [fk_tipo], [fk_estado], [pin]) VAL"& _ 
                "UES (@pk_id, @nombre, @fk_tipo, @fk_estado, @pin);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk_id, nombre, fk_tip"& _ 
                "o, fk_estado, pin FROM Sensor WHERE (pk_id = @pk_id)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@nombre", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fk_tipo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fk_tipo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fk_estado", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fk_estado", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@pin", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pin", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Sensor] SET [pk_id] = @pk_id, [nombre] = @nombre, [fk_tipo] = @fk_t"& _ 
                "ipo, [fk_estado] = @fk_estado, [pin] = @pin WHERE (([pk_id] = @Original_pk_id) A"& _ 
                "ND ([nombre] = @Original_nombre) AND ([fk_tipo] = @Original_fk_tipo) AND ([fk_es"& _ 
                "tado] = @Original_fk_estado) AND ([pin] = @Original_pin));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk_id, nombre"& _ 
                ", fk_tipo, fk_estado, pin FROM Sensor WHERE (pk_id = @pk_id)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@nombre", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fk_tipo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fk_tipo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fk_estado", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fk_estado", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@pin", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pin", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_nombre", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_fk_tipo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fk_tipo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_fk_estado", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fk_estado", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_pin", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pin", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=.\SQLEXPRESS;AttachDbFilename=|DataDirectory|\bin\Debug\dbproyecto.md"& _ 
                "f;Integrated Security=True;Connect Timeout=30;User Instance=True"
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT pk_id, nombre, fk_tipo, fk_estado, pin FROM dbo.Sensor"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dbproyectoDataSet.SensorDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dbproyectoDataSet.SensorDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dbproyectoDataSet.SensorDataTable = New dbproyectoDataSet.SensorDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dbproyectoDataSet.SensorDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dbproyectoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Sensor")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_pk_id As Integer, ByVal Original_nombre As String, ByVal Original_fk_tipo As Integer, ByVal Original_fk_estado As Integer, ByVal Original_pin As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_pk_id,Integer)
            If (Original_nombre Is Nothing) Then
                Throw New System.ArgumentNullException("Original_nombre")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_nombre,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_fk_tipo,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_fk_estado,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_pin,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal pk_id As Integer, ByVal nombre As String, ByVal fk_tipo As Integer, ByVal fk_estado As Integer, ByVal pin As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(pk_id,Integer)
            If (nombre Is Nothing) Then
                Throw New System.ArgumentNullException("nombre")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nombre,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(fk_tipo,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(fk_estado,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(pin,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal pk_id As Integer, ByVal nombre As String, ByVal fk_tipo As Integer, ByVal fk_estado As Integer, ByVal pin As Integer, ByVal Original_pk_id As Integer, ByVal Original_nombre As String, ByVal Original_fk_tipo As Integer, ByVal Original_fk_estado As Integer, ByVal Original_pin As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(pk_id,Integer)
            If (nombre Is Nothing) Then
                Throw New System.ArgumentNullException("nombre")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nombre,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(fk_tipo,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(fk_estado,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(pin,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_pk_id,Integer)
            If (Original_nombre Is Nothing) Then
                Throw New System.ArgumentNullException("Original_nombre")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_nombre,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_fk_tipo,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_fk_estado,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_pin,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sensor_en_mapaTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sensor_en_mapa"
            tableMapping.ColumnMappings.Add("pk_id", "pk_id")
            tableMapping.ColumnMappings.Add("fk_id_sensor", "fk_id_sensor")
            tableMapping.ColumnMappings.Add("fk_id_mapa", "fk_id_mapa")
            tableMapping.ColumnMappings.Add("posx", "posx")
            tableMapping.ColumnMappings.Add("posy", "posy")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[sensor_en_mapa] ([pk_id], [fk_id_sensor], [fk_id_mapa], [posx]"& _ 
                ", [posy]) VALUES (@pk_id, @fk_id_sensor, @fk_id_mapa, @posx, @posy)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fk_id_sensor", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fk_id_sensor", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fk_id_mapa", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fk_id_mapa", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@posx", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "posx", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@posy", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "posy", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=.\SQLEXPRESS;AttachDbFilename=|DataDirectory|\bin\Debug\dbproyecto.md"& _ 
                "f;Integrated Security=True;Connect Timeout=30;User Instance=True"
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT pk_id, fk_id_sensor, fk_id_mapa, posx, posy FROM dbo.sensor_en_mapa"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dbproyectoDataSet.sensor_en_mapaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dbproyectoDataSet.sensor_en_mapaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dbproyectoDataSet.sensor_en_mapaDataTable = New dbproyectoDataSet.sensor_en_mapaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dbproyectoDataSet.sensor_en_mapaDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dbproyectoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "sensor_en_mapa")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal pk_id As Integer, ByVal fk_id_sensor As Integer, ByVal fk_id_mapa As Integer, ByVal posx As Integer, ByVal posy As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(pk_id,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(fk_id_sensor,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(fk_id_mapa,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(posx,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(posy,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tb_logTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tb_log"
            tableMapping.ColumnMappings.Add("pk_id", "pk_id")
            tableMapping.ColumnMappings.Add("fk_id_sensor", "fk_id_sensor")
            tableMapping.ColumnMappings.Add("fk_id_estado_sensor", "fk_id_estado_sensor")
            tableMapping.ColumnMappings.Add("suceso", "suceso")
            tableMapping.ColumnMappings.Add("fecha_hora", "fecha_hora")
            tableMapping.ColumnMappings.Add("fk_id_usuario", "fk_id_usuario")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tb_log] ([pk_id], [fk_id_sensor], [fk_id_estado_sensor], [suce"& _ 
                "so], [fecha_hora], [fk_id_usuario]) VALUES (@pk_id, @fk_id_sensor, @fk_id_estado"& _ 
                "_sensor, @suceso, @fecha_hora, @fk_id_usuario)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fk_id_sensor", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fk_id_sensor", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fk_id_estado_sensor", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fk_id_estado_sensor", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@suceso", System.Data.SqlDbType.NText, 0, System.Data.ParameterDirection.Input, 0, 0, "suceso", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fecha_hora", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fecha_hora", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fk_id_usuario", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fk_id_usuario", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=.\SQLEXPRESS;AttachDbFilename=|DataDirectory|\bin\Debug\dbproyecto.md"& _ 
                "f;Integrated Security=True;Connect Timeout=30;User Instance=True"
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT pk_id, fk_id_sensor, fk_id_estado_sensor, suceso, fecha_hora, fk_id_usuari"& _ 
                "o FROM dbo.tb_log"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dbproyectoDataSet.tb_logDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dbproyectoDataSet.tb_logDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dbproyectoDataSet.tb_logDataTable = New dbproyectoDataSet.tb_logDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dbproyectoDataSet.tb_logDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dbproyectoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tb_log")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal pk_id As Integer, ByVal fk_id_sensor As Integer, ByVal fk_id_estado_sensor As Integer, ByVal suceso As String, ByVal fecha_hora As Date, ByVal fk_id_usuario As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(pk_id,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(fk_id_sensor,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(fk_id_estado_sensor,Integer)
            If (suceso Is Nothing) Then
                Throw New System.ArgumentNullException("suceso")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(suceso,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(fecha_hora,Date)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(fk_id_usuario,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tipo_sensorTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tipo_sensor"
            tableMapping.ColumnMappings.Add("pk_id", "pk_id")
            tableMapping.ColumnMappings.Add("nombre", "nombre")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tipo_sensor] WHERE (([pk_id] = @Original_pk_id) AND ([nombre] "& _ 
                "= @Original_nombre))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_nombre", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tipo_sensor] ([pk_id], [nombre]) VALUES (@pk_id, @nombre);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT pk_id, nombre FROM tipo_sensor WHERE (pk_id = @pk_id)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@nombre", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tipo_sensor] SET [pk_id] = @pk_id, [nombre] = @nombre WHERE (([pk_i"& _ 
                "d] = @Original_pk_id) AND ([nombre] = @Original_nombre));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk_id, nombre "& _ 
                "FROM tipo_sensor WHERE (pk_id = @pk_id)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@nombre", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_nombre", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=.\SQLEXPRESS;AttachDbFilename=|DataDirectory|\bin\Debug\dbproyecto.md"& _ 
                "f;Integrated Security=True;Connect Timeout=30;User Instance=True"
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT pk_id, nombre FROM dbo.tipo_sensor"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dbproyectoDataSet.tipo_sensorDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dbproyectoDataSet.tipo_sensorDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dbproyectoDataSet.tipo_sensorDataTable = New dbproyectoDataSet.tipo_sensorDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dbproyectoDataSet.tipo_sensorDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dbproyectoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tipo_sensor")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_pk_id As Integer, ByVal Original_nombre As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_pk_id,Integer)
            If (Original_nombre Is Nothing) Then
                Throw New System.ArgumentNullException("Original_nombre")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_nombre,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal pk_id As Integer, ByVal nombre As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(pk_id,Integer)
            If (nombre Is Nothing) Then
                Throw New System.ArgumentNullException("nombre")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nombre,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal pk_id As Integer, ByVal nombre As String, ByVal Original_pk_id As Integer, ByVal Original_nombre As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(pk_id,Integer)
            If (nombre Is Nothing) Then
                Throw New System.ArgumentNullException("nombre")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nombre,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_pk_id,Integer)
            If (Original_nombre Is Nothing) Then
                Throw New System.ArgumentNullException("Original_nombre")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_nombre,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class UsuarioTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Usuario"
            tableMapping.ColumnMappings.Add("pk_id", "pk_id")
            tableMapping.ColumnMappings.Add("nombre_completo", "nombre_completo")
            tableMapping.ColumnMappings.Add("clave", "clave")
            tableMapping.ColumnMappings.Add("usuario", "usuario")
            tableMapping.ColumnMappings.Add("visible", "visible")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Usuario] WHERE (([pk_id] = @Original_pk_id) AND ([nombre_compl"& _ 
                "eto] = @Original_nombre_completo) AND ([clave] = @Original_clave) AND ([usuario]"& _ 
                " = @Original_usuario) AND ([visible] = @Original_visible))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_nombre_completo", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_completo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_clave", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "clave", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_usuario", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "usuario", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_visible", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "visible", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Usuario] ([pk_id], [nombre_completo], [clave], [usuario], [vis"& _ 
                "ible]) VALUES (@pk_id, @nombre_completo, @clave, @usuario, @visible);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk"& _ 
                "_id, nombre_completo, clave, usuario, visible FROM Usuario WHERE (pk_id = @pk_id"& _ 
                ")"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@nombre_completo", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_completo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@clave", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "clave", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@usuario", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "usuario", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@visible", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "visible", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Usuario] SET [pk_id] = @pk_id, [nombre_completo] = @nombre_completo"& _ 
                ", [clave] = @clave, [usuario] = @usuario, [visible] = @visible WHERE (([pk_id] ="& _ 
                " @Original_pk_id) AND ([nombre_completo] = @Original_nombre_completo) AND ([clav"& _ 
                "e] = @Original_clave) AND ([usuario] = @Original_usuario) AND ([visible] = @Orig"& _ 
                "inal_visible));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk_id, nombre_completo, clave, usuario, visible FROM Usu"& _ 
                "ario WHERE (pk_id = @pk_id)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@nombre_completo", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_completo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@clave", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "clave", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@usuario", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "usuario", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@visible", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "visible", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_nombre_completo", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_completo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_clave", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "clave", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_usuario", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "usuario", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_visible", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "visible", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=.\SQLEXPRESS;AttachDbFilename=|DataDirectory|\bin\Debug\dbproyecto.md"& _ 
                "f;Integrated Security=True;Connect Timeout=30;User Instance=True"
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT pk_id, nombre_completo, clave, usuario, visible FROM dbo.Usuario"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dbproyectoDataSet.UsuarioDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dbproyectoDataSet.UsuarioDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dbproyectoDataSet.UsuarioDataTable = New dbproyectoDataSet.UsuarioDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dbproyectoDataSet.UsuarioDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dbproyectoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Usuario")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_pk_id As Integer, ByVal Original_nombre_completo As String, ByVal Original_clave As String, ByVal Original_usuario As String, ByVal Original_visible As Boolean) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_pk_id,Integer)
            If (Original_nombre_completo Is Nothing) Then
                Throw New System.ArgumentNullException("Original_nombre_completo")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_nombre_completo,String)
            End If
            If (Original_clave Is Nothing) Then
                Throw New System.ArgumentNullException("Original_clave")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_clave,String)
            End If
            If (Original_usuario Is Nothing) Then
                Throw New System.ArgumentNullException("Original_usuario")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_usuario,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_visible,Boolean)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal pk_id As Integer, ByVal nombre_completo As String, ByVal clave As String, ByVal usuario As String, ByVal visible As Boolean) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(pk_id,Integer)
            If (nombre_completo Is Nothing) Then
                Throw New System.ArgumentNullException("nombre_completo")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nombre_completo,String)
            End If
            If (clave Is Nothing) Then
                Throw New System.ArgumentNullException("clave")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(clave,String)
            End If
            If (usuario Is Nothing) Then
                Throw New System.ArgumentNullException("usuario")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(usuario,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(visible,Boolean)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal pk_id As Integer, ByVal nombre_completo As String, ByVal clave As String, ByVal usuario As String, ByVal visible As Boolean, ByVal Original_pk_id As Integer, ByVal Original_nombre_completo As String, ByVal Original_clave As String, ByVal Original_usuario As String, ByVal Original_visible As Boolean) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(pk_id,Integer)
            If (nombre_completo Is Nothing) Then
                Throw New System.ArgumentNullException("nombre_completo")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nombre_completo,String)
            End If
            If (clave Is Nothing) Then
                Throw New System.ArgumentNullException("clave")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(clave,String)
            End If
            If (usuario Is Nothing) Then
                Throw New System.ArgumentNullException("usuario")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(usuario,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(visible,Boolean)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_pk_id,Integer)
            If (Original_nombre_completo Is Nothing) Then
                Throw New System.ArgumentNullException("Original_nombre_completo")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_nombre_completo,String)
            End If
            If (Original_clave Is Nothing) Then
                Throw New System.ArgumentNullException("Original_clave")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_clave,String)
            End If
            If (Original_usuario Is Nothing) Then
                Throw New System.ArgumentNullException("Original_usuario")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_usuario,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_visible,Boolean)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class vigilanteTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "vigilante"
            tableMapping.ColumnMappings.Add("pk_id", "pk_id")
            tableMapping.ColumnMappings.Add("nombre", "nombre")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[vigilante] WHERE (([pk_id] = @Original_pk_id))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[vigilante] ([pk_id], [nombre]) VALUES (@pk_id, @nombre);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELE"& _ 
                "CT pk_id, nombre FROM vigilante WHERE (pk_id = @pk_id)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@nombre", System.Data.SqlDbType.NText, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[vigilante] SET [pk_id] = @pk_id, [nombre] = @nombre WHERE (([pk_id]"& _ 
                " = @Original_pk_id));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pk_id, nombre FROM vigilante WHERE (pk_id = @pk_id"& _ 
                ")"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@nombre", System.Data.SqlDbType.NText, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_pk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pk_id", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=.\SQLEXPRESS;AttachDbFilename=|DataDirectory|\bin\Debug\dbproyecto.md"& _ 
                "f;Integrated Security=True;Connect Timeout=30;User Instance=True"
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT pk_id, nombre FROM dbo.vigilante"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dbproyectoDataSet.vigilanteDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dbproyectoDataSet.vigilanteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dbproyectoDataSet.vigilanteDataTable = New dbproyectoDataSet.vigilanteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dbproyectoDataSet.vigilanteDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dbproyectoDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "vigilante")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_pk_id As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_pk_id,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal pk_id As Integer, ByVal nombre As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(pk_id,Integer)
            If (nombre Is Nothing) Then
                Throw New System.ArgumentNullException("nombre")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nombre,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal pk_id As Integer, ByVal nombre As String, ByVal Original_pk_id As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(pk_id,Integer)
            If (nombre Is Nothing) Then
                Throw New System.ArgumentNullException("nombre")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nombre,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_pk_id,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
